{"cells":[{"cell_type":"markdown","id":"yIhF-ZtOccwF","metadata":{"id":"yIhF-ZtOccwF"},"source":["# Final Project Models\n"]},{"cell_type":"markdown","source":["## Group 1\n","Anusha Bhat, Devyani Mahajan, Mahima Masetty, Nidhi Pareddy"],"metadata":{"id":"hhABUopAuDBZ"},"id":"hhABUopAuDBZ"},{"cell_type":"markdown","id":"aj9hXX0HcqJr","metadata":{"id":"aj9hXX0HcqJr"},"source":["#Data Loading"]},{"cell_type":"code","execution_count":null,"id":"77622eb2-df4f-4cd8-a900-d8c1a2a24417","metadata":{"id":"77622eb2-df4f-4cd8-a900-d8c1a2a24417"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.cluster import KMeans\n","from kmodes.kprototypes import KPrototypes\n","from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler\n","from collections import defaultdict\n","from sklearn.metrics import silhouette_score, accuracy_score, recall_score\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import classification_report, make_scorer, roc_auc_score, pairwise_distances\n","from scipy.spatial.distance import cdist\n","import statsmodels.api as sm\n","import statsmodels.formula.api as smf\n","from statsmodels.tools.tools import add_constant\n","import warnings\n","from statsmodels.tools.sm_exceptions import ConvergenceWarning\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.model_selection import cross_val_score, StratifiedKFold\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.decomposition import PCA\n","from imblearn.over_sampling import SMOTE\n","from imblearn.pipeline import Pipeline"]},{"cell_type":"code","execution_count":null,"id":"c0b84699-0f8a-4af3-a755-6cc735bc9d09","metadata":{"id":"c0b84699-0f8a-4af3-a755-6cc735bc9d09"},"outputs":[],"source":["# Reading train and test split datasets\n","train_df = pd.read_csv(\"train.csv\")\n","test_df = pd.read_csv(\"test.csv\")\n"]},{"cell_type":"code","execution_count":null,"id":"8bcdd6dd-a73a-46db-9829-c64e7c24a7c9","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":325},"id":"8bcdd6dd-a73a-46db-9829-c64e7c24a7c9","outputId":"2aeea338-b109-4e96-f63a-01cbee804685"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Age     BusinessTravel  DailyRate              Department  \\\n","0   47      Travel_Rarely       1225                   Sales   \n","1   22      Travel_Rarely        594  Research & Development   \n","2   46      Travel_Rarely        406                   Sales   \n","3   25      Travel_Rarely        622                   Sales   \n","4   43  Travel_Frequently       1001  Research & Development   \n","\n","   DistanceFromHome      Education    EducationField EnvironmentSatisfaction  \\\n","0                 2         Master     Life Sciences                  Medium   \n","1                 2  Below College  Technical Degree                    High   \n","2                 3  Below College         Marketing                     Low   \n","3                13  Below College           Medical                  Medium   \n","4                 9         Doctor           Medical               Very High   \n","\n","   Gender  HourlyRate  ... PercentSalaryHike PerformanceRating  \\\n","0  Female          47  ...                14         Excellent   \n","1    Male         100  ...                14         Excellent   \n","2    Male          52  ...                12         Excellent   \n","3    Male          40  ...                11         Excellent   \n","4    Male          72  ...                13         Excellent   \n","\n","  RelationshipSatisfaction StockOptionLevel  TotalWorkingYears  \\\n","0                     High                3                 29   \n","1                     High                1                  3   \n","2                Very High                1                 23   \n","3                     High                0                  7   \n","4                   Medium                1                 10   \n","\n","   TrainingTimesLastYear  WorkLifeBalance YearsInCurrentRole  \\\n","0                      2           Better                  2   \n","1                      2           Better                  1   \n","2                      3           Better                  9   \n","3                      1           Better                  4   \n","4                      3           Better                  7   \n","\n","   YearsSinceLastPromotion Attrition  \n","0                        1        No  \n","1                        2        No  \n","2                        4        No  \n","3                        0        No  \n","4                        4        No  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-21c80769-87fe-495f-91a8-deabedd4201c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>BusinessTravel</th>\n","      <th>DailyRate</th>\n","      <th>Department</th>\n","      <th>DistanceFromHome</th>\n","      <th>Education</th>\n","      <th>EducationField</th>\n","      <th>EnvironmentSatisfaction</th>\n","      <th>Gender</th>\n","      <th>HourlyRate</th>\n","      <th>...</th>\n","      <th>PercentSalaryHike</th>\n","      <th>PerformanceRating</th>\n","      <th>RelationshipSatisfaction</th>\n","      <th>StockOptionLevel</th>\n","      <th>TotalWorkingYears</th>\n","      <th>TrainingTimesLastYear</th>\n","      <th>WorkLifeBalance</th>\n","      <th>YearsInCurrentRole</th>\n","      <th>YearsSinceLastPromotion</th>\n","      <th>Attrition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>47</td>\n","      <td>Travel_Rarely</td>\n","      <td>1225</td>\n","      <td>Sales</td>\n","      <td>2</td>\n","      <td>Master</td>\n","      <td>Life Sciences</td>\n","      <td>Medium</td>\n","      <td>Female</td>\n","      <td>47</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>22</td>\n","      <td>Travel_Rarely</td>\n","      <td>594</td>\n","      <td>Research &amp; Development</td>\n","      <td>2</td>\n","      <td>Below College</td>\n","      <td>Technical Degree</td>\n","      <td>High</td>\n","      <td>Male</td>\n","      <td>100</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>46</td>\n","      <td>Travel_Rarely</td>\n","      <td>406</td>\n","      <td>Sales</td>\n","      <td>3</td>\n","      <td>Below College</td>\n","      <td>Marketing</td>\n","      <td>Low</td>\n","      <td>Male</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>12</td>\n","      <td>Excellent</td>\n","      <td>Very High</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>9</td>\n","      <td>4</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>25</td>\n","      <td>Travel_Rarely</td>\n","      <td>622</td>\n","      <td>Sales</td>\n","      <td>13</td>\n","      <td>Below College</td>\n","      <td>Medical</td>\n","      <td>Medium</td>\n","      <td>Male</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>11</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>Better</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>43</td>\n","      <td>Travel_Frequently</td>\n","      <td>1001</td>\n","      <td>Research &amp; Development</td>\n","      <td>9</td>\n","      <td>Doctor</td>\n","      <td>Medical</td>\n","      <td>Very High</td>\n","      <td>Male</td>\n","      <td>72</td>\n","      <td>...</td>\n","      <td>13</td>\n","      <td>Excellent</td>\n","      <td>Medium</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21c80769-87fe-495f-91a8-deabedd4201c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-21c80769-87fe-495f-91a8-deabedd4201c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-21c80769-87fe-495f-91a8-deabedd4201c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-acb079cf-cad6-4538-a5b5-05c883f240cf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-acb079cf-cad6-4538-a5b5-05c883f240cf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-acb079cf-cad6-4538-a5b5-05c883f240cf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df"}},"metadata":{},"execution_count":152}],"source":["train_df.head()"]},{"cell_type":"code","execution_count":null,"id":"d76d0751-accb-4863-99da-6d5754062121","metadata":{"id":"d76d0751-accb-4863-99da-6d5754062121","outputId":"5a7648dd-839b-4d83-eb02-755b5bc0d7c5","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1176 entries, 0 to 1175\n","Data columns (total 28 columns):\n"," #   Column                    Non-Null Count  Dtype \n","---  ------                    --------------  ----- \n"," 0   Age                       1176 non-null   int64 \n"," 1   BusinessTravel            1176 non-null   object\n"," 2   DailyRate                 1176 non-null   int64 \n"," 3   Department                1176 non-null   object\n"," 4   DistanceFromHome          1176 non-null   int64 \n"," 5   Education                 1176 non-null   object\n"," 6   EducationField            1176 non-null   object\n"," 7   EnvironmentSatisfaction   1176 non-null   object\n"," 8   Gender                    1176 non-null   object\n"," 9   HourlyRate                1176 non-null   int64 \n"," 10  JobInvolvement            1176 non-null   object\n"," 11  JobRole                   1176 non-null   object\n"," 12  JobSatisfaction           1176 non-null   object\n"," 13  MaritalStatus             1176 non-null   object\n"," 14  MonthlyIncome             1176 non-null   int64 \n"," 15  MonthlyRate               1176 non-null   int64 \n"," 16  NumCompaniesWorked        1176 non-null   int64 \n"," 17  OverTime                  1176 non-null   object\n"," 18  PercentSalaryHike         1176 non-null   int64 \n"," 19  PerformanceRating         1176 non-null   object\n"," 20  RelationshipSatisfaction  1176 non-null   object\n"," 21  StockOptionLevel          1176 non-null   int64 \n"," 22  TotalWorkingYears         1176 non-null   int64 \n"," 23  TrainingTimesLastYear     1176 non-null   int64 \n"," 24  WorkLifeBalance           1176 non-null   object\n"," 25  YearsInCurrentRole        1176 non-null   int64 \n"," 26  YearsSinceLastPromotion   1176 non-null   int64 \n"," 27  Attrition                 1176 non-null   object\n","dtypes: int64(13), object(15)\n","memory usage: 257.4+ KB\n"]}],"source":["train_df.info()"]},{"cell_type":"code","execution_count":null,"id":"ec9fc461-4930-4ef6-86cd-0f0787cc17ea","metadata":{"id":"ec9fc461-4930-4ef6-86cd-0f0787cc17ea","outputId":"d7681361-e63f-4c6a-eb31-f64851a52440","colab":{"base_uri":"https://localhost:8080/","height":325}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Age     BusinessTravel  DailyRate              Department  \\\n","0   47      Travel_Rarely       1225                   Sales   \n","1   22      Travel_Rarely        594  Research & Development   \n","2   46      Travel_Rarely        406                   Sales   \n","3   25      Travel_Rarely        622                   Sales   \n","4   43  Travel_Frequently       1001  Research & Development   \n","\n","   DistanceFromHome      Education    EducationField EnvironmentSatisfaction  \\\n","0                 2         Master     Life Sciences                  Medium   \n","1                 2  Below College  Technical Degree                    High   \n","2                 3  Below College         Marketing                     Low   \n","3                13  Below College           Medical                  Medium   \n","4                 9         Doctor           Medical               Very High   \n","\n","   Gender  HourlyRate  ... PercentSalaryHike PerformanceRating  \\\n","0  Female          47  ...                14         Excellent   \n","1    Male         100  ...                14         Excellent   \n","2    Male          52  ...                12         Excellent   \n","3    Male          40  ...                11         Excellent   \n","4    Male          72  ...                13         Excellent   \n","\n","  RelationshipSatisfaction StockOptionLevel  TotalWorkingYears  \\\n","0                     High                3                 29   \n","1                     High                1                  3   \n","2                Very High                1                 23   \n","3                     High                0                  7   \n","4                   Medium                1                 10   \n","\n","   TrainingTimesLastYear  WorkLifeBalance YearsInCurrentRole  \\\n","0                      2           Better                  2   \n","1                      2           Better                  1   \n","2                      3           Better                  9   \n","3                      1           Better                  4   \n","4                      3           Better                  7   \n","\n","   YearsSinceLastPromotion Attrition  \n","0                        1        No  \n","1                        2        No  \n","2                        4        No  \n","3                        0        No  \n","4                        4        No  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-0672c6e5-ad88-4382-92bd-c11c049dce74\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>BusinessTravel</th>\n","      <th>DailyRate</th>\n","      <th>Department</th>\n","      <th>DistanceFromHome</th>\n","      <th>Education</th>\n","      <th>EducationField</th>\n","      <th>EnvironmentSatisfaction</th>\n","      <th>Gender</th>\n","      <th>HourlyRate</th>\n","      <th>...</th>\n","      <th>PercentSalaryHike</th>\n","      <th>PerformanceRating</th>\n","      <th>RelationshipSatisfaction</th>\n","      <th>StockOptionLevel</th>\n","      <th>TotalWorkingYears</th>\n","      <th>TrainingTimesLastYear</th>\n","      <th>WorkLifeBalance</th>\n","      <th>YearsInCurrentRole</th>\n","      <th>YearsSinceLastPromotion</th>\n","      <th>Attrition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>47</td>\n","      <td>Travel_Rarely</td>\n","      <td>1225</td>\n","      <td>Sales</td>\n","      <td>2</td>\n","      <td>Master</td>\n","      <td>Life Sciences</td>\n","      <td>Medium</td>\n","      <td>Female</td>\n","      <td>47</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>22</td>\n","      <td>Travel_Rarely</td>\n","      <td>594</td>\n","      <td>Research &amp; Development</td>\n","      <td>2</td>\n","      <td>Below College</td>\n","      <td>Technical Degree</td>\n","      <td>High</td>\n","      <td>Male</td>\n","      <td>100</td>\n","      <td>...</td>\n","      <td>14</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>46</td>\n","      <td>Travel_Rarely</td>\n","      <td>406</td>\n","      <td>Sales</td>\n","      <td>3</td>\n","      <td>Below College</td>\n","      <td>Marketing</td>\n","      <td>Low</td>\n","      <td>Male</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>12</td>\n","      <td>Excellent</td>\n","      <td>Very High</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>9</td>\n","      <td>4</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>25</td>\n","      <td>Travel_Rarely</td>\n","      <td>622</td>\n","      <td>Sales</td>\n","      <td>13</td>\n","      <td>Below College</td>\n","      <td>Medical</td>\n","      <td>Medium</td>\n","      <td>Male</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>11</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>Better</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>43</td>\n","      <td>Travel_Frequently</td>\n","      <td>1001</td>\n","      <td>Research &amp; Development</td>\n","      <td>9</td>\n","      <td>Doctor</td>\n","      <td>Medical</td>\n","      <td>Very High</td>\n","      <td>Male</td>\n","      <td>72</td>\n","      <td>...</td>\n","      <td>13</td>\n","      <td>Excellent</td>\n","      <td>Medium</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0672c6e5-ad88-4382-92bd-c11c049dce74')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0672c6e5-ad88-4382-92bd-c11c049dce74 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0672c6e5-ad88-4382-92bd-c11c049dce74');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-957e2c92-fa8b-4e54-8233-da1eb7c428b5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-957e2c92-fa8b-4e54-8233-da1eb7c428b5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-957e2c92-fa8b-4e54-8233-da1eb7c428b5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df"}},"metadata":{},"execution_count":154}],"source":["train_df.head()"]},{"cell_type":"markdown","id":"pq0kRr0K00Q_","metadata":{"id":"pq0kRr0K00Q_"},"source":["# KMeans"]},{"cell_type":"code","source":["# Identifying categorical and numerical columns\n","categorical_cols = train_df.select_dtypes(include=['object', 'category']).columns.tolist()\n","numerical_cols = train_df.select_dtypes(include=['int64', 'float64']).columns.tolist()"],"metadata":{"id":"DXSpRc3Cyd51"},"id":"DXSpRc3Cyd51","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"a364b2e3","metadata":{"id":"a364b2e3"},"outputs":[],"source":["train_df_onehot = pd.get_dummies(train_df, columns=categorical_cols, drop_first=True)\n","test_df_onehot = pd.get_dummies(test_df, columns=categorical_cols, drop_first=True)"]},{"cell_type":"code","execution_count":null,"id":"mrXItn9-1PH9","metadata":{"id":"mrXItn9-1PH9"},"outputs":[],"source":["scaler = MinMaxScaler()\n","train_scaled = train_df_onehot.copy()\n","train_scaled[numerical_cols] = scaler.fit_transform(train_df_onehot[numerical_cols])\n","test_scaled = test_df_onehot.copy()\n","test_scaled[numerical_cols] = scaler.transform(test_df_onehot[numerical_cols])"]},{"cell_type":"code","execution_count":null,"id":"2o3XFejN02oS","metadata":{"id":"2o3XFejN02oS"},"outputs":[],"source":["K_range = range(2, 10)\n","inertia_values = []\n","silhouette_scores = []"]},{"cell_type":"code","execution_count":null,"id":"ij783Ihl1GYG","metadata":{"id":"ij783Ihl1GYG"},"outputs":[],"source":["for k in K_range:\n","    kmeans = KMeans(n_clusters=k, random_state=7, n_init=10)\n","    cluster_labels = kmeans.fit_predict(train_scaled)\n","    inertia_values.append(kmeans.inertia_)\n","    silhouette_scores.append(silhouette_score(train_scaled, cluster_labels))"]},{"cell_type":"code","execution_count":null,"id":"GwQ9oOTd1rIq","metadata":{"id":"GwQ9oOTd1rIq","colab":{"base_uri":"https://localhost:8080/","height":505},"outputId":"dd49d1bb-0859-45b5-9149-6bee3a82dd71"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Elbow Method: Optimal K')"]},"metadata":{},"execution_count":164},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["plt.figure(figsize=(12, 5))\n","plt.subplot(1, 2, 1)\n","plt.plot(K_range, inertia_values, marker='o', linestyle='--', color='blue')\n","plt.xlabel(\"Number of Clusters (K)\")\n","plt.ylabel(\"Inertia (WCSS)\")\n","plt.title(\"Elbow Method: Optimal K\")"]},{"cell_type":"markdown","source":["### We picked 5 as k opt as we can see the elbow for the curve at k=5."],"metadata":{"id":"TgSkQUKE8TaW"},"id":"TgSkQUKE8TaW"},{"cell_type":"code","execution_count":null,"id":"6LjO3xQP1xFX","metadata":{"id":"6LjO3xQP1xFX"},"outputs":[],"source":["kmeans = KMeans(n_clusters=5, random_state=7, n_init=10)\n","train_clusters = kmeans.fit_predict(train_scaled)\n","test_clusters = kmeans.predict(test_scaled)"]},{"cell_type":"code","execution_count":null,"id":"K41af9pP11nv","metadata":{"id":"K41af9pP11nv"},"outputs":[],"source":["centroids = kmeans.cluster_centers_"]},{"cell_type":"code","execution_count":null,"id":"TWlW2Rf812nT","metadata":{"id":"TWlW2Rf812nT"},"outputs":[],"source":["num_feature_indices = [train_scaled.columns.get_loc(col) for col in numerical_cols]\n","centroids_numerical = centroids[:, num_feature_indices]"]},{"cell_type":"code","execution_count":null,"id":"WL6UH-X113uo","metadata":{"id":"WL6UH-X113uo"},"outputs":[],"source":["centroids_original = scaler.inverse_transform(centroids_numerical)"]},{"cell_type":"code","execution_count":null,"id":"NLG475h3143l","metadata":{"id":"NLG475h3143l","colab":{"base_uri":"https://localhost:8080/"},"outputId":"9aa3f8bf-88f9-49d4-c14e-a355f52b5e75"},"outputs":[{"output_type":"stream","name":"stdout","text":["Final Centroids (Original Scale):\n"," [[3.69601990e+01 7.97870647e+02 9.54726368e+00 6.56119403e+01\n","  6.15536816e+03 1.42716965e+04 2.47263682e+00 1.56019900e+01\n","  9.45273632e-01 1.14925373e+01 2.67164179e+00 4.44278607e+00\n","  2.39303483e+00]\n"," [3.72808511e+01 8.14012766e+02 9.48510638e+00 6.55957447e+01\n","  7.32617872e+03 1.43730383e+04 2.60425532e+00 1.49829787e+01\n","  1.15744681e+00 1.20297872e+01 2.84680851e+00 4.76595745e+00\n","  2.51914894e+00]\n"," [3.58549618e+01 7.80450382e+02 9.30152672e+00 6.59541985e+01\n","  5.59807252e+03 1.50705076e+04 2.66412214e+00 1.52175573e+01\n","  3.47328244e-01 1.04770992e+01 2.82824427e+00 3.81679389e+00\n","  1.75954198e+00]\n"," [3.82091691e+01 8.34538682e+02 9.18338109e+00 6.57908309e+01\n","  6.90672493e+03 1.37655788e+04 2.92836676e+00 1.52808023e+01\n","  1.07449857e+00 1.20372493e+01 2.68767908e+00 4.21776504e+00\n","  2.14899713e+00]\n"," [3.55891473e+01 7.60441860e+02 9.41860465e+00 6.34418605e+01\n","  6.66472868e+03 1.49146279e+04 2.62015504e+00 1.50775194e+01\n","  1.55038760e-02 9.93798450e+00 2.79844961e+00 3.80620155e+00\n","  2.19379845e+00]]\n"]}],"source":["print(\"Final Centroids (Original Scale):\\n\", centroids_original)"]},{"cell_type":"code","execution_count":null,"id":"ccu-2pvb16Ga","metadata":{"id":"ccu-2pvb16Ga"},"outputs":[],"source":["train_df_onehot['Cluster'] = train_clusters\n","test_df_onehot['Cluster'] = test_clusters"]},{"cell_type":"code","execution_count":null,"id":"zrzM2wbx176V","metadata":{"id":"zrzM2wbx176V","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3f00b641-a656-4215-888e-f94f392c894f"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but PCA was fitted with feature names\n","  warnings.warn(\n"]}],"source":["pca = PCA(n_components=2)\n","train_pca = pca.fit_transform(train_scaled)\n","test_pca = pca.transform(test_scaled)\n","centroids_pca = pca.transform(centroids)"]},{"cell_type":"code","execution_count":null,"id":"g4D7P5xH2BUr","metadata":{"id":"g4D7P5xH2BUr","colab":{"base_uri":"https://localhost:8080/","height":53},"outputId":"163ae02d-10ac-4550-d546-b257be1a9c4a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Figure size 1200x600 with 0 Axes>"]},"metadata":{},"execution_count":175},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 0 Axes>"]},"metadata":{}}],"source":["plt.figure(figsize=(12, 6))"]},{"cell_type":"code","execution_count":null,"id":"pFeSRfmK2CmZ","metadata":{"id":"pFeSRfmK2CmZ","colab":{"base_uri":"https://localhost:8080/","height":490},"outputId":"296b9d34-4d40-4343-b2ec-1093106891dd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7ee9251d0ed0>"]},"metadata":{},"execution_count":176},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# train clusters\n","plt.subplot(1, 2, 1)\n","plt.scatter(train_pca[:, 0], train_pca[:, 1], c=train_clusters, cmap='viridis', alpha=0.6, label=\"Train Data\")\n","plt.scatter(centroids_pca[:, 0], centroids_pca[:, 1], c='red', marker='X', s=200, label=\"Centroids\")\n","plt.xlabel(\"PCA Component 1\")\n","plt.ylabel(\"PCA Component 2\")\n","plt.title(\"Train Data Clusters\")\n","plt.legend()"]},{"cell_type":"code","execution_count":null,"id":"zpQnGOKF2Dyx","metadata":{"id":"zpQnGOKF2Dyx","colab":{"base_uri":"https://localhost:8080/","height":490},"outputId":"36272cad-46d9-49af-dda8-bbfc5f5bddc2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7ee9254567d0>"]},"metadata":{},"execution_count":177},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# test clusters\n","plt.subplot(1, 2, 2)\n","plt.scatter(test_pca[:, 0], test_pca[:, 1], c=test_clusters, cmap='plasma', alpha=0.6, label=\"Test Data\")\n","plt.scatter(centroids_pca[:, 0], centroids_pca[:, 1], c='red', marker='X', s=200, label=\"Centroids\")\n","plt.xlabel(\"PCA Component 1\")\n","plt.ylabel(\"PCA Component 2\")\n","plt.title(\"Test Data Clusters\")\n","plt.legend()"]},{"cell_type":"code","execution_count":null,"id":"Iuu1-xWI2FJz","metadata":{"id":"Iuu1-xWI2FJz"},"outputs":[],"source":["train_silhouette = silhouette_score(train_scaled, train_clusters)\n","test_silhouette = silhouette_score(test_scaled, test_clusters)"]},{"cell_type":"code","execution_count":null,"id":"veCo7owh2Gtg","metadata":{"id":"veCo7owh2Gtg","colab":{"base_uri":"https://localhost:8080/"},"outputId":"5ac863ca-348d-42b9-bc98-8bdc95b816c8"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Evaluation Results\n"," Train Silhouette Score: 0.052\n"," Test Silhouette Score: 0.051\n"]}],"source":["print(f\"\\nEvaluation Results\")\n","print(f\" Train Silhouette Score: {train_silhouette:.3f}\")\n","print(f\" Test Silhouette Score: {test_silhouette:.3f}\")"]},{"cell_type":"markdown","source":["We can see that the model performs similarly on both train and test datasets, where the silhouette scores vary by 0.001. This suggests that the cluster structure is **stable** across both datasets, and that the model **generalises well**, and the features and k-value have been well-chosen."],"metadata":{"id":"sUG2HoTGLLD3"},"id":"sUG2HoTGLLD3"},{"cell_type":"code","execution_count":null,"id":"q_wsKGGc2KLC","metadata":{"id":"q_wsKGGc2KLC"},"outputs":[],"source":["kmeans = KMeans(n_clusters=5, random_state=7, n_init=10)\n","train_scaled['Cluster'] = kmeans.fit_predict(train_scaled[numerical_cols])"]},{"cell_type":"code","execution_count":null,"id":"SF8x080M2Kro","metadata":{"id":"SF8x080M2Kro"},"outputs":[],"source":["cluster_summary = train_scaled.groupby('Cluster').mean()"]},{"cell_type":"code","execution_count":null,"id":"m_0yvB0q2L1H","metadata":{"id":"m_0yvB0q2L1H"},"outputs":[],"source":["centroids = kmeans.cluster_centers_\n","centroids_numerical = centroids[:, :len(numerical_cols)]\n","centroids_original = scaler.inverse_transform(centroids_numerical)"]},{"cell_type":"code","execution_count":null,"id":"T9q9canE2M8I","metadata":{"id":"T9q9canE2M8I"},"outputs":[],"source":["centroid_df = pd.DataFrame(centroids_original, columns=numerical_cols)\n","centroid_df['Cluster'] = range(len(centroid_df))"]},{"cell_type":"code","execution_count":null,"id":"WnamPkkV2Nw_","metadata":{"id":"WnamPkkV2Nw_","colab":{"base_uri":"https://localhost:8080/"},"outputId":"7b3f4eb2-1b0f-4203-b190-5b4cf54a3f27"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cluster Summary:\n","              Age  DailyRate  DistanceFromHome  HourlyRate  MonthlyIncome  \\\n","Cluster                                                                     \n","0        0.434837   0.491671          0.781271    0.523923       0.243104   \n","1        0.368097   0.503968          0.181995    0.235646       0.203826   \n","2        0.348958   0.491046          0.162822    0.774058       0.180579   \n","3        0.710404   0.517982          0.245342    0.503494       0.738728   \n","4        0.520016   0.512575          0.212912    0.536107       0.223627   \n","\n","         MonthlyRate  NumCompaniesWorked  PercentSalaryHike  StockOptionLevel  \\\n","Cluster                                                                         \n","0           0.528684            0.251462           0.343814          0.301435   \n","1           0.498223            0.157614           0.300548          0.244941   \n","2           0.468801            0.164352           0.267361          0.245370   \n","3           0.530681            0.370169           0.297748          0.250000   \n","4           0.447927            0.739316           0.321036          0.294872   \n","\n","         TotalWorkingYears  ...  MaritalStatus_Single  OverTime_Yes  \\\n","Cluster                     ...                                       \n","0                 0.254306  ...              0.301435      0.315789   \n","1                 0.205591  ...              0.341853      0.274760   \n","2                 0.183333  ...              0.361111      0.260417   \n","3                 0.626087  ...              0.244565      0.347826   \n","4                 0.267170  ...              0.296703      0.269231   \n","\n","         PerformanceRating_Outstanding  RelationshipSatisfaction_Low  \\\n","Cluster                                                                \n","0                             0.191388                      0.177033   \n","1                             0.143770                      0.223642   \n","2                             0.121528                      0.190972   \n","3                             0.173913                      0.152174   \n","4                             0.181319                      0.142857   \n","\n","         RelationshipSatisfaction_Medium  RelationshipSatisfaction_Very High  \\\n","Cluster                                                                        \n","0                               0.224880                            0.306220   \n","1                               0.191693                            0.287540   \n","2                               0.201389                            0.319444   \n","3                               0.201087                            0.331522   \n","4                               0.208791                            0.318681   \n","\n","         WorkLifeBalance_Best  WorkLifeBalance_Better  WorkLifeBalance_Good  \\\n","Cluster                                                                       \n","0                    0.081340                0.598086              0.248804   \n","1                    0.118211                0.613419              0.217252   \n","2                    0.097222                0.628472              0.222222   \n","3                    0.119565                0.592391              0.222826   \n","4                    0.115385                0.571429              0.247253   \n","\n","         Attrition_Yes  \n","Cluster                 \n","0             0.234450  \n","1             0.150160  \n","2             0.163194  \n","3             0.065217  \n","4             0.192308  \n","\n","[5 rows x 55 columns]\n","Cluster Centroids:\n","         Age   DailyRate  DistanceFromHome  HourlyRate  MonthlyIncome  \\\n","0  36.263158  789.373206         22.875598   66.674641    5619.224880   \n","1  33.460064  806.539936          6.095847   46.495208    4874.361022   \n","2  32.656250  788.500000          5.559028   84.184028    4433.506944   \n","3  47.836957  826.103261          7.869565   65.244565   15018.239130   \n","4  39.840659  818.554945          6.961538   67.527473    5249.857143   \n","\n","    MonthlyRate  NumCompaniesWorked  PercentSalaryHike  StockOptionLevel  \\\n","0  15260.880383            2.263158          15.813397          0.904306   \n","1  14502.239617            1.418530          15.207668          0.734824   \n","2  13769.479167            1.479167          14.743056          0.736111   \n","3  15310.619565            3.331522          15.168478          0.750000   \n","4  13249.631868            6.653846          15.494505          0.884615   \n","\n","   TotalWorkingYears  TrainingTimesLastYear  YearsInCurrentRole  \\\n","0          10.172249               2.535885            3.933014   \n","1           8.223642               2.987220            4.437700   \n","2           7.333333               2.843750            3.159722   \n","3          25.043478               2.646739            6.875000   \n","4          10.686813               2.609890            3.241758   \n","\n","   YearsSinceLastPromotion  Cluster  \n","0                 1.727273        0  \n","1                 1.984026        1  \n","2                 1.413194        2  \n","3                 5.195652        3  \n","4                 1.219780        4  \n"]}],"source":["print(\"Cluster Summary:\")\n","print(cluster_summary)\n","\n","print(\"Cluster Centroids:\")\n","print(centroid_df)"]},{"cell_type":"markdown","id":"BUuCBzh81jHa","metadata":{"id":"BUuCBzh81jHa"},"source":["#KPrototypes"]},{"cell_type":"code","execution_count":null,"id":"a99cd6cd-8bd6-419e-8442-35c544713411","metadata":{"id":"a99cd6cd-8bd6-419e-8442-35c544713411"},"outputs":[],"source":["original_train_df = train_df.copy()\n","original_test_df = test_df.copy()"]},{"cell_type":"code","execution_count":null,"id":"90a367b8-5d43-468b-b5a9-76f03e80163c","metadata":{"id":"90a367b8-5d43-468b-b5a9-76f03e80163c"},"outputs":[],"source":["# Scaling numerical columns using minmaxscaler\n","train_df[numerical_cols] = scaler.fit_transform(train_df[numerical_cols])\n","test_df[numerical_cols] = scaler.fit_transform(test_df[numerical_cols])\n","\n","\n","for col in categorical_cols:\n","    le = LabelEncoder()\n","    train_df[col] = le.fit_transform(train_df[col])\n","    test_df[col] = le.transform(test_df[col])"]},{"cell_type":"code","execution_count":null,"id":"80eb34b9-8acd-415d-b441-7549f123710b","metadata":{"id":"80eb34b9-8acd-415d-b441-7549f123710b"},"outputs":[],"source":["# Function to computes a mixed distance matrix using euclidean for numerical and weighted hamming for categorical features\n","def compute_mixed_distance_matrix(X, categorical_indices, gamma):\n","    num_indices = [i for i in range(X.shape[1]) if i not in categorical_indices]\n","\n","    # Splitting numerical and categorical data\n","    X_num = X[:, num_indices].astype(float)\n","    X_cat = X[:, categorical_indices].astype(str)\n","\n","    # Computing Euclidean distance for numerical data\n","    euclidean_dist = pairwise_distances(X_num, metric='euclidean')\n","\n","    # Computing Hamming distance for categorical data\n","    hamming_dist = pairwise_distances(X_cat, metric='hamming')\n","\n","    # Combine distances with gamma weighting\n","    return euclidean_dist + (gamma * hamming_dist)"]},{"cell_type":"code","execution_count":null,"id":"03f05490-be94-4cb7-bb9a-f7230dfd294e","metadata":{"id":"03f05490-be94-4cb7-bb9a-f7230dfd294e"},"outputs":[],"source":["# Computing silhouette score for k-prototypes clustering using a mixed distance metric\n","\n","def compute_silhouette_score(X, categorical_indices, kproto_clusters, gamma):\n","    n_samples = X.shape[0]\n","    dist_matrix = compute_mixed_distance_matrix(X, categorical_indices, gamma)\n","\n","    # Computing silhouette scores\n","    a = np.zeros(n_samples)\n","    b = np.zeros(n_samples)\n","\n","    for i in range(n_samples):\n","        cluster_i = kproto_clusters[i]\n","\n","        # Intra-cluster distance (a)\n","        same_cluster_mask = (kproto_clusters == cluster_i)\n","        a[i] = np.mean(dist_matrix[i, same_cluster_mask]) if np.sum(same_cluster_mask) > 1 else 0\n","\n","        # Nearest-cluster distance (b)\n","        unique_clusters = np.unique(kproto_clusters)\n","        b_values = []\n","\n","        for cluster in unique_clusters:\n","            if cluster != cluster_i:\n","                other_cluster_mask = (kproto_clusters == cluster)\n","                b_values.append(np.mean(dist_matrix[i, other_cluster_mask]))\n","\n","        b[i] = min(b_values) if b_values else 0\n","\n","    # Compute silhouette scores\n","    silhouette_scores = (b - a) / np.maximum(a, b)\n","    return np.mean(silhouette_scores)"]},{"cell_type":"code","execution_count":null,"id":"be471454-78ae-4750-bf35-b486c6395279","metadata":{"id":"be471454-78ae-4750-bf35-b486c6395279"},"outputs":[],"source":["# Converting to numpy array for k-prototypes\n","train_matrix = train_df.values\n","test_matrix = test_df.values\n","cat_indices = [train_df.columns.get_loc(col) for col in categorical_cols]\n","\n","# Computing cost for different k using elbow method\n","cost = []\n","silhouette_scores = []\n","k_values = range(2, 10)\n","\n","for k in k_values:\n","    kproto = KPrototypes(n_clusters=k, init='Cao', random_state=7)\n","    clusters = kproto.fit_predict(train_matrix, categorical=cat_indices)\n","    cost.append(kproto.cost_)"]},{"cell_type":"code","execution_count":null,"id":"0a6f7ac7-d351-473d-abf7-d329e9a80c1c","metadata":{"id":"0a6f7ac7-d351-473d-abf7-d329e9a80c1c","outputId":"e501a7eb-99f7-4c82-f715-4c52bc700d56","colab":{"base_uri":"https://localhost:8080/","height":410}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Plotting elbow method\n","plt.figure(figsize=(10, 4))\n","plt.plot(k_values, cost, marker='o', linestyle='--')\n","plt.xlabel('Number of Clusters (k)')\n","plt.ylabel('Cost (WCSS)')\n","plt.title('Elbow Method for Optimal k')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"id":"3644badf-39ad-4d77-8ae5-edb60f26b261","metadata":{"id":"3644badf-39ad-4d77-8ae5-edb60f26b261","outputId":"74a64f0c-21e7-4569-e057-9993697e7dac","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Using gamma values: [1.0979273328017987, 2.1958546656035973, 4.391709331207195, 10.979273328017987]\n"]}],"source":["# Function to compute a data-driven base gamma\n","def compute_base_gamma(X, categorical_indices):\n","    num_indices = [i for i in range(X.shape[1]) if i not in categorical_indices]\n","\n","    # Compute pairwise distances\n","    num_dist = pairwise_distances(X[:, num_indices].astype(float), metric='euclidean')\n","    cat_dist = pairwise_distances(X[:, categorical_indices].astype(str), metric='hamming')\n","\n","    # Compute average distances\n","    avg_num_dist = np.mean(num_dist)\n","    avg_cat_dist = np.mean(cat_dist)\n","\n","    return avg_num_dist / avg_cat_dist  # Base gamma\n","\n","# Compute informed gamma values\n","base_gamma = compute_base_gamma(train_matrix, cat_indices)\n","gamma_values = [0.5 * base_gamma, base_gamma, 2 * base_gamma, 5 * base_gamma]\n","optimal_k_range = range (3,6)\n","\n","print(f\"Using gamma values: {gamma_values}\")"]},{"cell_type":"code","execution_count":null,"id":"0ba50796-b6de-403b-bbbb-154d0c307262","metadata":{"id":"0ba50796-b6de-403b-bbbb-154d0c307262","outputId":"8d218c89-9312-4376-cd9b-c6225ca524a3","colab":{"base_uri":"https://localhost:8080/","height":505}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Best k: 3, Best gamma: 10.979273328017987, Best silhouette score: 0.055252675688168884\n"]}],"source":["best_k = None\n","best_gamma = None\n","best_silhouette = -1\n","silhouette_results = []\n","\n","# Grid search over (k, gamma)\n","for k in optimal_k_range:\n","    for gamma in gamma_values:\n","        kproto = KPrototypes(n_clusters=k, init='Cao', gamma=gamma, random_state=7)\n","        clusters = kproto.fit_predict(train_matrix, categorical=cat_indices)\n","\n","        # Compute silhouette score\n","        silhouette_score = compute_silhouette_score(train_matrix, cat_indices, clusters, gamma)\n","        silhouette_results.append((k, gamma, silhouette_score))\n","\n","        # Update best (k, gamma) if silhouette score improves\n","        if silhouette_score > best_silhouette:\n","            best_silhouette = silhouette_score\n","            best_k = k\n","            best_gamma = gamma\n","\n","# Convert silhouette results to structured format for visualization\n","silhouette_results = np.array(silhouette_results)\n","\n","# Plot Silhouette Scores for (k, gamma)\n","plt.figure(figsize=(10, 5))\n","for gamma in gamma_values:\n","    gamma_scores = silhouette_results[silhouette_results[:, 1] == gamma]\n","    plt.plot(gamma_scores[:, 0], gamma_scores[:, 2], marker='o', label=f'gamma={gamma:.2f}')\n","\n","plt.xlabel(\"Number of Clusters (k)\")\n","plt.ylabel(\"Silhouette Score\")\n","plt.title(\"Silhouette Score for Different k and gamma\")\n","plt.legend()\n","plt.show()\n","\n","print(f\"Best k: {best_k}, Best gamma: {best_gamma}, Best silhouette score: {best_silhouette}\")"]},{"cell_type":"markdown","id":"9556e352-e0f5-4592-9860-d4d6df4e406e","metadata":{"id":"9556e352-e0f5-4592-9860-d4d6df4e406e"},"source":["### The highest silhouette score for the optimal gamma occurs at k=3, suggesting that three clusters provide the best separation. For the elbow method plot, the \"elbow\" is where the within-cluster sum of squares (WCSS) stops decreasing rapidly and levels off. Based on the above plot, the elbow appears to be around k=3 or k=3. Since both the silhouette score and elbow method suggest k=3 is a strong choice, we are going with 3 to be the most optimal number of clusters."]},{"cell_type":"code","execution_count":null,"id":"a8798c7a-3872-47b1-ad88-e5f2f13b7c4a","metadata":{"id":"a8798c7a-3872-47b1-ad88-e5f2f13b7c4a"},"outputs":[],"source":["# Choosing optimal k as 3\n","optimal_k = 3\n","kproto = KPrototypes(n_clusters=optimal_k, init='Cao', gamma = best_gamma, random_state=42)\n","train_clusters = kproto.fit_predict(train_matrix, categorical=cat_indices)\n","test_clusters = kproto.predict(test_matrix, categorical=cat_indices)"]},{"cell_type":"code","execution_count":null,"id":"c2387ee5-c64c-471a-99c9-3f249bc8bccc","metadata":{"id":"c2387ee5-c64c-471a-99c9-3f249bc8bccc","outputId":"fe153fb2-a74e-40a6-8fba-fe49b40de46f","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Silhouette Score on Test Data: 0.0613\n"]}],"source":["# Computing test silhouette score\n","test_silhouette_score = compute_silhouette_score(test_matrix, cat_indices, test_clusters, gamma)\n","print(f\"Silhouette Score on Test Data: {test_silhouette_score:.4f}\")"]},{"cell_type":"code","execution_count":null,"id":"5026c9d3-dc89-4d24-9a5b-baa4b098dca8","metadata":{"id":"5026c9d3-dc89-4d24-9a5b-baa4b098dca8"},"outputs":[],"source":["# Adding cluster labels to datasets\n","train_df['Cluster'] = train_clusters\n","test_df['Cluster'] = test_clusters"]},{"cell_type":"code","execution_count":null,"id":"cbce49b1-6ad7-4515-a641-c779efd3a4c7","metadata":{"id":"cbce49b1-6ad7-4515-a641-c779efd3a4c7"},"outputs":[],"source":["train_df = original_train_df.merge(train_df[[\"Cluster\"]], left_index=True, right_index=True)\n","test_df = original_test_df.merge(test_df[[\"Cluster\"]], left_index=True, right_index=True)"]},{"cell_type":"code","execution_count":null,"id":"ec79b368-9496-421c-8160-fa092ef75210","metadata":{"id":"ec79b368-9496-421c-8160-fa092ef75210","outputId":"0c4bf9e1-188b-4fc9-b4ee-e85acc796354","colab":{"base_uri":"https://localhost:8080/","height":548}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Age     BusinessTravel  DailyRate              Department  \\\n","0      47      Travel_Rarely       1225                   Sales   \n","1      22      Travel_Rarely        594  Research & Development   \n","2      46      Travel_Rarely        406                   Sales   \n","3      25      Travel_Rarely        622                   Sales   \n","4      43  Travel_Frequently       1001  Research & Development   \n","...   ...                ...        ...                     ...   \n","1171   23      Travel_Rarely        427                   Sales   \n","1172   38      Travel_Rarely       1009                   Sales   \n","1173   22      Travel_Rarely        217  Research & Development   \n","1174   36      Travel_Rarely        430  Research & Development   \n","1175   39  Travel_Frequently        766                   Sales   \n","\n","      DistanceFromHome      Education    EducationField  \\\n","0                    2         Master     Life Sciences   \n","1                    2  Below College  Technical Degree   \n","2                    3  Below College         Marketing   \n","3                   13  Below College           Medical   \n","4                    9         Doctor           Medical   \n","...                ...            ...               ...   \n","1171                 7       Bachelor     Life Sciences   \n","1172                 2        College     Life Sciences   \n","1173                 8  Below College     Life Sciences   \n","1174                 2         Master             Other   \n","1175                20       Bachelor     Life Sciences   \n","\n","     EnvironmentSatisfaction  Gender  HourlyRate  ... PerformanceRating  \\\n","0                     Medium  Female          47  ...         Excellent   \n","1                       High    Male         100  ...         Excellent   \n","2                        Low    Male          52  ...         Excellent   \n","3                     Medium    Male          40  ...         Excellent   \n","4                  Very High    Male          72  ...         Excellent   \n","...                      ...     ...         ...  ...               ...   \n","1171                    High    Male          99  ...       Outstanding   \n","1172                  Medium  Female          31  ...         Excellent   \n","1173                  Medium    Male          94  ...         Excellent   \n","1174               Very High  Female          73  ...       Outstanding   \n","1175                    High    Male          83  ...         Excellent   \n","\n","     RelationshipSatisfaction StockOptionLevel TotalWorkingYears  \\\n","0                        High                3                29   \n","1                        High                1                 3   \n","2                   Very High                1                23   \n","3                        High                0                 7   \n","4                      Medium                1                10   \n","...                       ...              ...               ...   \n","1171                   Medium                1                 3   \n","1172                Very High                1                11   \n","1173                      Low                1                 4   \n","1174                Very High                1                15   \n","1175                Very High                1                 7   \n","\n","      TrainingTimesLastYear  WorkLifeBalance  YearsInCurrentRole  \\\n","0                         2           Better                   2   \n","1                         2           Better                   1   \n","2                         3           Better                   9   \n","3                         1           Better                   4   \n","4                         3           Better                   7   \n","...                     ...              ...                 ...   \n","1171                      2           Better                   2   \n","1172                      3           Better                   7   \n","1173                      3             Good                   3   \n","1174                      2           Better                   0   \n","1175                      6           Better                   1   \n","\n","     YearsSinceLastPromotion  Attrition Cluster  \n","0                          1         No       2  \n","1                          2         No       0  \n","2                          4         No       2  \n","3                          0         No       0  \n","4                          4         No       1  \n","...                      ...        ...     ...  \n","1171                       0        Yes       0  \n","1172                       1         No       2  \n","1173                       1         No       0  \n","1174                       0         No       1  \n","1175                       2         No       0  \n","\n","[1176 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-86510b63-e6cf-438f-90c3-7f8875d596f6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>BusinessTravel</th>\n","      <th>DailyRate</th>\n","      <th>Department</th>\n","      <th>DistanceFromHome</th>\n","      <th>Education</th>\n","      <th>EducationField</th>\n","      <th>EnvironmentSatisfaction</th>\n","      <th>Gender</th>\n","      <th>HourlyRate</th>\n","      <th>...</th>\n","      <th>PerformanceRating</th>\n","      <th>RelationshipSatisfaction</th>\n","      <th>StockOptionLevel</th>\n","      <th>TotalWorkingYears</th>\n","      <th>TrainingTimesLastYear</th>\n","      <th>WorkLifeBalance</th>\n","      <th>YearsInCurrentRole</th>\n","      <th>YearsSinceLastPromotion</th>\n","      <th>Attrition</th>\n","      <th>Cluster</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>47</td>\n","      <td>Travel_Rarely</td>\n","      <td>1225</td>\n","      <td>Sales</td>\n","      <td>2</td>\n","      <td>Master</td>\n","      <td>Life Sciences</td>\n","      <td>Medium</td>\n","      <td>Female</td>\n","      <td>47</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>22</td>\n","      <td>Travel_Rarely</td>\n","      <td>594</td>\n","      <td>Research &amp; Development</td>\n","      <td>2</td>\n","      <td>Below College</td>\n","      <td>Technical Degree</td>\n","      <td>High</td>\n","      <td>Male</td>\n","      <td>100</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>46</td>\n","      <td>Travel_Rarely</td>\n","      <td>406</td>\n","      <td>Sales</td>\n","      <td>3</td>\n","      <td>Below College</td>\n","      <td>Marketing</td>\n","      <td>Low</td>\n","      <td>Male</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>Very High</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>9</td>\n","      <td>4</td>\n","      <td>No</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>25</td>\n","      <td>Travel_Rarely</td>\n","      <td>622</td>\n","      <td>Sales</td>\n","      <td>13</td>\n","      <td>Below College</td>\n","      <td>Medical</td>\n","      <td>Medium</td>\n","      <td>Male</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>Better</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>43</td>\n","      <td>Travel_Frequently</td>\n","      <td>1001</td>\n","      <td>Research &amp; Development</td>\n","      <td>9</td>\n","      <td>Doctor</td>\n","      <td>Medical</td>\n","      <td>Very High</td>\n","      <td>Male</td>\n","      <td>72</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>Medium</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>No</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1171</th>\n","      <td>23</td>\n","      <td>Travel_Rarely</td>\n","      <td>427</td>\n","      <td>Sales</td>\n","      <td>7</td>\n","      <td>Bachelor</td>\n","      <td>Life Sciences</td>\n","      <td>High</td>\n","      <td>Male</td>\n","      <td>99</td>\n","      <td>...</td>\n","      <td>Outstanding</td>\n","      <td>Medium</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>Yes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1172</th>\n","      <td>38</td>\n","      <td>Travel_Rarely</td>\n","      <td>1009</td>\n","      <td>Sales</td>\n","      <td>2</td>\n","      <td>College</td>\n","      <td>Life Sciences</td>\n","      <td>Medium</td>\n","      <td>Female</td>\n","      <td>31</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>Very High</td>\n","      <td>1</td>\n","      <td>11</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1173</th>\n","      <td>22</td>\n","      <td>Travel_Rarely</td>\n","      <td>217</td>\n","      <td>Research &amp; Development</td>\n","      <td>8</td>\n","      <td>Below College</td>\n","      <td>Life Sciences</td>\n","      <td>Medium</td>\n","      <td>Male</td>\n","      <td>94</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>Low</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>Good</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1174</th>\n","      <td>36</td>\n","      <td>Travel_Rarely</td>\n","      <td>430</td>\n","      <td>Research &amp; Development</td>\n","      <td>2</td>\n","      <td>Master</td>\n","      <td>Other</td>\n","      <td>Very High</td>\n","      <td>Female</td>\n","      <td>73</td>\n","      <td>...</td>\n","      <td>Outstanding</td>\n","      <td>Very High</td>\n","      <td>1</td>\n","      <td>15</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1175</th>\n","      <td>39</td>\n","      <td>Travel_Frequently</td>\n","      <td>766</td>\n","      <td>Sales</td>\n","      <td>20</td>\n","      <td>Bachelor</td>\n","      <td>Life Sciences</td>\n","      <td>High</td>\n","      <td>Male</td>\n","      <td>83</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>Very High</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>6</td>\n","      <td>Better</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1176 rows Ã— 29 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86510b63-e6cf-438f-90c3-7f8875d596f6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-86510b63-e6cf-438f-90c3-7f8875d596f6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-86510b63-e6cf-438f-90c3-7f8875d596f6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-64a2cc21-1e72-4fe3-9a47-6f98e3b9812f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-64a2cc21-1e72-4fe3-9a47-6f98e3b9812f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-64a2cc21-1e72-4fe3-9a47-6f98e3b9812f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_da423ff8-1c1d-4bcb-b8ff-3dc030d36cae\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_da423ff8-1c1d-4bcb-b8ff-3dc030d36cae button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('train_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df"}},"metadata":{},"execution_count":96}],"source":["train_df"]},{"cell_type":"code","execution_count":null,"id":"1345bb8b-7194-46b2-8082-b9fca5c41d01","metadata":{"id":"1345bb8b-7194-46b2-8082-b9fca5c41d01","outputId":"d9c983c1-b067-416c-cffc-47365ff25f33","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","====== Train Data Cluster Analysis ======\n","\n","Cluster Size Distribution:\n"," Cluster\n","0    575\n","1    312\n","2    289\n","Name: count, dtype: int64 \n","\n","\n","Numerical Feature Summary by Cluster:\n","               Age                    DailyRate                     \\\n","              mean       std median        mean         std median   \n","Cluster                                                              \n","0        35.387826  8.945296   34.0  773.886957  390.974347  750.0   \n","1        38.259615  9.480047   37.5  865.625000  405.212767  912.0   \n","2        38.840830  8.765993   37.0  797.349481  411.360149  771.0   \n","\n","        DistanceFromHome                  HourlyRate  ... TotalWorkingYears  \\\n","                    mean       std median       mean  ...            median   \n","Cluster                                               ...                     \n","0               9.311304  8.200798    7.0  65.530435  ...               8.0   \n","1               9.785256  8.260356    7.0  63.647436  ...              10.0   \n","2               8.989619  8.057297    7.0  67.439446  ...              10.0   \n","\n","        TrainingTimesLastYear                  YearsInCurrentRole            \\\n","                         mean       std median               mean       std   \n","Cluster                                                                       \n","0                    2.747826  1.285428    3.0           3.751304  3.323299   \n","1                    2.788462  1.244975    3.0           4.246795  3.654710   \n","2                    2.754325  1.212718    3.0           5.169550  3.768792   \n","\n","               YearsSinceLastPromotion                   \n","        median                    mean       std median  \n","Cluster                                                  \n","0          3.0                1.829565  2.928086    1.0  \n","1          3.0                2.102564  3.136097    1.0  \n","2          4.0                2.972318  3.686395    1.0  \n","\n","[3 rows x 39 columns]\n","\n","Categorical Feature Distribution by Cluster:\n","\n","Feature: BusinessTravel\n","Cluster  BusinessTravel   \n","0        Travel_Rarely        0.693913\n","         Travel_Frequently    0.194783\n","         Non-Travel           0.111304\n","1        Travel_Rarely        0.711538\n","         Travel_Frequently    0.195513\n","         Non-Travel           0.092949\n","2        Travel_Rarely        0.716263\n","         Travel_Frequently    0.179931\n","         Non-Travel           0.103806\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: Department\n","Cluster  Department            \n","0        Research & Development    0.786087\n","         Sales                     0.163478\n","         Human Resources           0.050435\n","1        Research & Development    0.852564\n","         Sales                     0.118590\n","         Human Resources           0.028846\n","2        Sales                     0.806228\n","         Research & Development    0.159170\n","         Human Resources           0.034602\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: Education\n","Cluster  Education    \n","0        Bachelor         0.514783\n","         Master           0.196522\n","         Below College    0.130435\n","         College          0.130435\n","         Doctor           0.027826\n","1        College          0.362179\n","         Bachelor         0.233974\n","         Master           0.233974\n","         Below College    0.137821\n","         Doctor           0.032051\n","2        Master           0.463668\n","         Bachelor         0.297578\n","         College          0.124567\n","         Below College    0.076125\n","         Doctor           0.038062\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: EducationField\n","Cluster  EducationField  \n","0        Life Sciences       0.537391\n","         Medical             0.246957\n","         Technical Degree    0.107826\n","         Other               0.057391\n","         Marketing           0.026087\n","         Human Resources     0.024348\n","1        Medical             0.554487\n","         Life Sciences       0.269231\n","         Technical Degree    0.089744\n","         Other               0.060897\n","         Marketing           0.022436\n","         Human Resources     0.003205\n","2        Marketing           0.387543\n","         Life Sciences       0.297578\n","         Medical             0.169550\n","         Technical Degree    0.086505\n","         Other               0.034602\n","         Human Resources     0.024221\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: EnvironmentSatisfaction\n","Cluster  EnvironmentSatisfaction\n","0        High                       0.412174\n","         Very High                  0.264348\n","         Low                        0.163478\n","         Medium                     0.160000\n","1        Very High                  0.461538\n","         High                       0.205128\n","         Medium                     0.201923\n","         Low                        0.131410\n","2        Low                        0.325260\n","         High                       0.259516\n","         Medium                     0.235294\n","         Very High                  0.179931\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: Gender\n","Cluster  Gender\n","0        Male      0.753043\n","         Female    0.246957\n","1        Female    0.560897\n","         Male      0.439103\n","2        Female    0.536332\n","         Male      0.463668\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: JobInvolvement\n","Cluster  JobInvolvement\n","0        High              0.580870\n","         Medium            0.253913\n","         Very High         0.106087\n","         Low               0.059130\n","1        High              0.592949\n","         Medium            0.259615\n","         Very High         0.083333\n","         Low               0.064103\n","2        High              0.643599\n","         Medium            0.231834\n","         Very High         0.089965\n","         Low               0.034602\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: JobRole\n","Cluster  JobRole                  \n","0        Research Scientist           0.280000\n","         Laboratory Technician        0.206957\n","         Healthcare Representative    0.113043\n","         Sales Executive              0.099130\n","         Manufacturing Director       0.097391\n","         Research Director            0.055652\n","         Sales Representative         0.052174\n","         Manager                      0.048696\n","         Human Resources              0.046957\n","1        Laboratory Technician        0.298077\n","         Research Scientist           0.176282\n","         Manufacturing Director       0.144231\n","         Healthcare Representative    0.108974\n","         Sales Executive              0.073718\n","         Research Director            0.070513\n","         Manager                      0.067308\n","         Sales Representative         0.035256\n","         Human Resources              0.025641\n","2        Sales Executive              0.667820\n","         Manager                      0.117647\n","         Sales Representative         0.065744\n","         Manufacturing Director       0.041522\n","         Healthcare Representative    0.031142\n","         Research Director            0.031142\n","         Human Resources              0.020761\n","         Research Scientist           0.013841\n","         Laboratory Technician        0.010381\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: JobSatisfaction\n","Cluster  JobSatisfaction\n","0        Very High          0.413913\n","         High               0.238261\n","         Low                0.177391\n","         Medium             0.170435\n","1        High               0.455128\n","         Medium             0.189103\n","         Very High          0.185897\n","         Low                0.169872\n","2        Low                0.294118\n","         High               0.259516\n","         Very High          0.242215\n","         Medium             0.204152\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: MaritalStatus\n","Cluster  MaritalStatus\n","0        Single           0.441739\n","         Married          0.321739\n","         Divorced         0.236522\n","1        Married          0.599359\n","         Divorced         0.224359\n","         Single           0.176282\n","2        Married          0.581315\n","         Single           0.221453\n","         Divorced         0.197232\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: OverTime\n","Cluster  OverTime\n","0        No          0.808696\n","         Yes         0.191304\n","1        Yes         0.557692\n","         No          0.442308\n","2        No          0.806228\n","         Yes         0.193772\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: PerformanceRating\n","Cluster  PerformanceRating\n","0        Excellent            0.820870\n","         Outstanding          0.179130\n","1        Excellent            0.868590\n","         Outstanding          0.131410\n","2        Excellent            0.858131\n","         Outstanding          0.141869\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: RelationshipSatisfaction\n","Cluster  RelationshipSatisfaction\n","0        High                        0.393043\n","         Medium                      0.219130\n","         Very High                   0.212174\n","         Low                         0.175652\n","1        Very High                   0.419872\n","         High                        0.201923\n","         Medium                      0.201923\n","         Low                         0.176282\n","2        Very High                   0.387543\n","         High                        0.228374\n","         Low                         0.207612\n","         Medium                      0.176471\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: WorkLifeBalance\n","Cluster  WorkLifeBalance\n","0        Better             0.586087\n","         Good               0.250435\n","         Best               0.099130\n","         Bad                0.064348\n","1        Better             0.628205\n","         Good               0.214744\n","         Best               0.102564\n","         Bad                0.054487\n","2        Better             0.615917\n","         Good               0.204152\n","         Best               0.124567\n","         Bad                0.055363\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: Attrition\n","Cluster  Attrition\n","0        No           0.840000\n","         Yes          0.160000\n","1        No           0.833333\n","         Yes          0.166667\n","2        No           0.840830\n","         Yes          0.159170\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n"]}],"source":["# Function to analyze clusters\n","def analyze_clusters(df, categorical_cols, numerical_cols, dataset_name=\"Dataset\"):\n","    print(f\"\\n====== {dataset_name} Cluster Analysis ======\\n\")\n","\n","    # Cluster size distribution\n","    print(\"Cluster Size Distribution:\\n\", df['Cluster'].value_counts(), \"\\n\")\n","\n","    # Summary statistics for numerical features\n","    print(\"\\nNumerical Feature Summary by Cluster:\")\n","    print(df.groupby('Cluster')[numerical_cols].agg(['mean', 'std', 'median']))\n","\n","    # Category distribution for each cluster\n","    print(\"\\nCategorical Feature Distribution by Cluster:\")\n","    for col in categorical_cols:\n","        print(f\"\\nFeature: {col}\")\n","        print(df.groupby('Cluster')[col].value_counts(normalize=True))  # Relative frequencies\n","        print(\"-\" * 50)\n","\n","analyze_clusters(train_df, categorical_cols, numerical_cols, \"Train Data\")"]},{"cell_type":"markdown","source":["## Cluster Descriptions\n","\n","## Cluster 0: **\"Early-Career Researchers\"**\n","- **Size**: 575 employees (49.1% of the dataset)\n","- **Key Attributes**:\n","  - **Daily Rate**: Moderate (mean = $773.89)\n","  - **Years in Current Role**: Lower (mean = 3.75 years)\n","  - **Education**: Mostly Bachelor's degree (51.5%)\n","  - **Environment Satisfaction**: High (41.2% report \"High\" satisfaction)\n","  - **Job Satisfaction**: Very High (41.4% report \"Very High\" satisfaction)\n","  - **Overtime**: Low (19.1% work overtime)\n","  - **Job Role**: Primarily Research Scientists (28%) and Laboratory Technicians (20.7%)\n","  - **Gender**: Predominantly male (75.3%)\n","  - **Marital Status**: Mostly single (44.2%)\n","  - **Attrition Rate**: 16%\n","\n","- **Description**: This cluster represents early-career employees, primarily in research and development roles. They have moderate daily rates, lower tenure in their current roles, and high job and environment satisfaction. They are less likely to work overtime and are predominantly single males with bachelor's degrees.\n","\n","---\n","\n","## Cluster 1: **\"Mid-Career Technicians\"**\n","- **Size**: 312 employees (26.6% of the dataset)\n","- **Key Attributes**:\n","  - **Daily Rate**: Higher (mean = $865.63)\n","  - **Years in Current Role**: Moderate (mean = 4.25 years)\n","  - **Education**: Balanced mix of College, Bachelor's, and Master's degrees\n","  - **Environment Satisfaction**: Very High (46.2% report \"Very High\" satisfaction)\n","  - **Job Satisfaction**: High (45.5% report \"High\" satisfaction)\n","  - **Overtime**: High (55.8% work overtime)\n","  - **Job Role**: Primarily Laboratory Technicians (29.8%) and Manufacturing Directors (14.4%)\n","  - **Gender**: More balanced (56.1% female, 43.9% male)\n","  - **Marital Status**: Mostly married (59.9%)\n","  - **Attrition Rate**: 16.7%\n","\n","- **Description**: This cluster consists of mid-career employees, often in technical or laboratory roles. They have higher daily rates, moderate tenure, and very high environment satisfaction. They are more likely to work overtime and are predominantly married with a balanced gender distribution. Their education levels are diverse, with a mix of college, bachelor's, and master's degrees.\n","\n","---\n","\n","## Cluster 2: **\"Senior Sales Executives\"**\n","- **Size**: 289 employees (24.7% of the dataset)\n","- **Key Attributes**:\n","  - **Daily Rate**: Moderate (mean = $797.35)\n","  - **Years in Current Role**: Higher (mean = 5.17 years)\n","  - **Education**: Mostly Master's degree (46.4%)\n","  - **Environment Satisfaction**: Low (32.5% report \"Low\" satisfaction)\n","  - **Job Satisfaction**: Low (29.4% report \"Low\" satisfaction)\n","  - **Overtime**: Low (19.4% work overtime)\n","  - **Job Role**: Primarily Sales Executives (66.8%) and Managers (11.8%)\n","  - **Gender**: Slightly more female (53.6%)\n","  - **Marital Status**: Mostly married (58.1%)\n","  - **Attrition Rate**: 15.9%\n","\n","- **Description**: This cluster represents senior employees, primarily in sales and managerial roles. They have moderate daily rates, higher tenure in their current roles, and lower job and environment satisfaction. They are less likely to work overtime and are predominantly married with a slight majority of females. Most hold master's degrees.\n","\n"],"metadata":{"id":"1qMZB_LK_Aif"},"id":"1qMZB_LK_Aif"},{"cell_type":"code","source":["# Save clustered datasets\n","train_df.to_csv('train_clustered.csv', index=False)\n","test_df.to_csv('test_clustered.csv', index=False)"],"metadata":{"id":"4898-sXL3NIy"},"id":"4898-sXL3NIy","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### **K-means**\n","###### Best k: 5\n","###### Train Silhouette Score: 0.052\n","###### Test Silhouette Score: 0.051\n","\n","##### **K-prototypes**\n","###### Best k: 3\n","###### Train Silhouette Score: 0.055\n","###### Test Silhouette Score: 0.061\n","\n","###### ***K-prototypes works better with mixed-type datasets by giving us a better silhouette score for train and test based on the chosen optimal k.***"],"metadata":{"id":"iRnSrqWKa19h"},"id":"iRnSrqWKa19h"},{"cell_type":"markdown","id":"WGuUwSRfq1HH","metadata":{"id":"WGuUwSRfq1HH"},"source":["#Logistic Regression"]},{"cell_type":"code","source":["# Load data\n","train_df = pd.read_csv('train_clustered.csv')\n","test_df = pd.read_csv('test_clustered.csv')"],"metadata":{"id":"PVcpWGSDfNyn"},"id":"PVcpWGSDfNyn","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Encode categorical columns\n","def encode_categorical(df, target_column='Attrition'):\n","    # Select categorical columns, excluding the target column\n","    categorical_columns = df.select_dtypes(include=['object']).columns\n","    categorical_columns = categorical_columns[categorical_columns != target_column]\n","    numerical_columns = df.select_dtypes(include=['int64']).columns\n","    numerical_columns = numerical_columns[numerical_columns != \"Cluster\"]\n","\n","    # Scale numerical data\n","    scaler = StandardScaler()\n","    df[numerical_columns] = scaler.fit_transform(df[numerical_columns])\n","\n","    # Make dummy variables\n","    df_encoded = pd.get_dummies(df, columns=categorical_columns, drop_first=True)\n","\n","    # Encode Attrition Col\n","    df_encoded[target_column] = df[target_column].map({'No': 0, 'Yes': 1})\n","\n","    df_encoded = df_encoded.astype(int)\n","\n","    return df_encoded\n"],"metadata":{"id":"WoZokfoFfSw0"},"id":"WoZokfoFfSw0","execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_df2 = encode_categorical(train_df)\n","\n","# Handle class imbalance with SMOTE\n","X = train_df2.drop('Attrition', axis=1)\n","y = train_df2['Attrition']\n","\n","smote = SMOTE(random_state=7)\n","X_resampled, y_resampled = smote.fit_resample(X, y)\n","\n","# Join data back\n","train_resampled_df = pd.DataFrame(X_resampled, columns=X.columns)\n","train_resampled_df['Attrition'] = y_resampled\n","\n","# Split for cross-validation set\n","train_df_encoded, cv_df_encoded = train_test_split(train_resampled_df,\n","                                             test_size=0.2,\n","                                             random_state=7,\n","                                             stratify=train_resampled_df['Attrition'])\n","\n","print(f\"Original class distribution in the full dataset: {y.value_counts()}\")\n","print(f\"Resampled class distribution: {pd.Series(y_resampled).value_counts()}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0YaUe8ScfW2v","executionInfo":{"status":"ok","timestamp":1741633480582,"user_tz":300,"elapsed":89,"user":{"displayName":"Anusha Bhat","userId":"17918010741182048907"}},"outputId":"6cdf6ca0-0454-4a49-e62f-de0313cf5ab6"},"id":"0YaUe8ScfW2v","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original class distribution in the full dataset: Attrition\n","0    986\n","1    190\n","Name: count, dtype: int64\n","Resampled class distribution: Attrition\n","0    986\n","1    986\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["# Encode test data (train and cv already encoded during SMOTE)\n","test_df_encoded = encode_categorical(test_df)\n","\n","# Align the columns of cv_df and test_df with train_df\n","cv_df_encoded = cv_df_encoded.reindex(columns=train_df_encoded.columns, fill_value=0)\n","test_df_encoded = test_df_encoded.reindex(columns=train_df_encoded.columns, fill_value=0)\n"],"metadata":{"id":"jM1VwQiGfiQ6"},"id":"jM1VwQiGfiQ6","execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["After using SMOTE, we have balanced the classes. This will help us to improve the recall metrics."],"metadata":{"id":"pUQ9VhPyf0oD"},"id":"pUQ9VhPyf0oD"},{"cell_type":"code","source":["# Split data into clusters\n","def process_cluster_data(df_encoded, cluster_column='Cluster', target_column='Attrition'):\n","    cluster_data = {}\n","\n","    # Loop through each cluster and drop cluster + attrition columns\n","    # Split into X and Y for model construction\n","    for cluster in df_encoded[cluster_column].unique():\n","        cluster_df = df_encoded[df_encoded[cluster_column] == cluster]\n","        y = cluster_df[target_column]\n","        X = cluster_df.drop(columns=[cluster_column, target_column])\n","\n","        cluster_data[cluster] = {'X': X, 'y': y}\n","\n","    return cluster_data"],"metadata":{"id":"mzdNIe6ffy14"},"id":"mzdNIe6ffy14","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split data into train, cv, and test for clusters 0, 1, 2\n","train_cluster_data = process_cluster_data(train_df_encoded)\n","cv_cluster_data = process_cluster_data(cv_df_encoded)\n","test_cluster_data = process_cluster_data(test_df_encoded)\n","\n","# Cluster 0\n","X_0, y_0 = train_cluster_data[0]['X'], train_cluster_data[0]['y']\n","X_0_cv, y_0_cv = cv_cluster_data[0]['X'], cv_cluster_data[0]['y']\n","X_0_test, y_0_test = test_cluster_data[0]['X'], test_cluster_data[0]['y']\n","\n","# Cluster 1\n","X_1, y_1 = train_cluster_data[1]['X'], train_cluster_data[1]['y']\n","X_1_cv, y_1_cv = cv_cluster_data[1]['X'], cv_cluster_data[1]['y']\n","X_1_test, y_1_test = test_cluster_data[1]['X'], test_cluster_data[1]['y']\n","\n","# Cluster 2\n","X_2, y_2 = train_cluster_data[2]['X'], train_cluster_data[2]['y']\n","X_2_cv, y_2_cv = cv_cluster_data[2]['X'], cv_cluster_data[2]['y']\n","X_2_test, y_2_test = test_cluster_data[2]['X'], test_cluster_data[2]['y']"],"metadata":{"id":"AcZM7Qoff9W4"},"id":"AcZM7Qoff9W4","execution_count":null,"outputs":[]},{"cell_type":"code","source":["warnings.filterwarnings('ignore', category=ConvergenceWarning)\n","warnings.filterwarnings('ignore', category=RuntimeWarning)\n","\n","# Step-wise forward selection for logistic regression using AIC for selection\n","def forward_selection(X, y):\n","    initial_features = X.columns.tolist()\n","\n","    best_aic = np.inf\n","    current_features = []\n","\n","    while True:\n","        aic_with_candidates = []\n","\n","\n","        for feature in initial_features:\n","            if feature not in current_features:\n","                try:\n","                    X_selected = sm.add_constant(X[current_features + [feature]])\n","                    model = sm.Logit(y, X_selected).fit(disp=0)\n","                    aic_with_candidates.append((model.aic, feature))\n","                except np.linalg.LinAlgError:\n","                    continue\n","\n","        # If no candidate features are available, break the loop\n","        if not aic_with_candidates:\n","            break\n","\n","        # Sort the candidates based on the lowest AIC value\n","        aic_with_candidates.sort()\n","        best_aic_new, best_feature = aic_with_candidates[0]\n","\n","        # If the new model with the best feature improves AIC, add the feature\n","        if best_aic_new < best_aic:\n","            best_aic = best_aic_new\n","            current_features.append(best_feature)\n","        else:\n","          # No further improvements\n","            break\n","\n","    # Fit the final model with the selected features\n","    X_final = sm.add_constant(X[current_features])\n","    final_model = sm.Logit(y, X_final).fit()\n","\n","    # Predict on the training data\n","    y_pred = final_model.predict(X_final)\n","    y_pred_binary = (y_pred >= 0.5).astype(int)\n","\n","    # Calculate performance metrics\n","    accuracy = accuracy_score(y, y_pred_binary)\n","    recall = recall_score(y, y_pred_binary)\n","    cm = confusion_matrix(y, y_pred_binary)\n","\n","    return {\n","        'selected_features': current_features,\n","        'final_model': final_model,\n","        'accuracy': accuracy,\n","        'recall': recall,\n","        'confusion_matrix': cm\n","    }"],"metadata":{"id":"lizuLYItf_Yn"},"id":"lizuLYItf_Yn","execution_count":null,"outputs":[]},{"cell_type":"code","source":["warnings.filterwarnings('ignore', category=ConvergenceWarning)\n","warnings.filterwarnings('ignore', category=RuntimeWarning)\n","\n","# Use GridSearch cross validation to tune the regularization parameters\n","def cross_validation_logistic(X_cv, y_cv, best_features):\n","    X_selected = X_cv[best_features]\n","\n","    model = LogisticRegression(max_iter=1000, solver='liblinear')\n","\n","    # Define the parameter grid to search\n","    param_grid = {\n","        'C': [0.001, 0.01, 0.1, 1, 10, 100],  # Regularization strength\n","        'penalty': ['l1', 'l2'],  # Type of regularization\n","        'class_weight': ['balanced', None]  # Class imbalance\n","    }\n","\n","    # Run grid search\n","    grid_search = GridSearchCV(model, param_grid, cv=5, scoring='accuracy', n_jobs=-1)\n","    grid_search.fit(X_selected, y_cv)\n","\n","    # Get the best model and its hyperparameters\n","    best_model = grid_search.best_estimator_\n","    best_params = grid_search.best_params_\n","\n","    # Fit the model\n","    best_model.fit(X_selected, y_cv)\n","    y_pred = best_model.predict(X_selected)\n","\n","    # Calculate metrics\n","    accuracy = accuracy_score(y_cv, y_pred)\n","    recall = recall_score(y_cv, y_pred)\n","    cm = confusion_matrix(y_cv, y_pred)\n","\n","    # Return the results in a dictionary, including the best hyperparameters found\n","    return {\n","        'best_model': best_model,\n","        'best_params': best_params,\n","        'accuracy': accuracy,\n","        'recall': recall,\n","        'confusion_matrix': cm\n","    }"],"metadata":{"id":"ivby2p2MgB7x"},"id":"ivby2p2MgB7x","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Function for testing cross-validation model\n","def test_best_model_cv(X_test, y_test, best_model, features):\n","    # Predict on the test data\n","    X_test_selected = X_test[features]\n","\n","    y_pred = best_model.predict(X_test_selected)\n","\n","    # Calculate metrics\n","    accuracy = accuracy_score(y_test, y_pred)\n","    recall = recall_score(y_test, y_pred)\n","    cm = confusion_matrix(y_test, y_pred)\n","\n","    # Return the results in a dictionary\n","    return {\n","        'accuracy': accuracy,\n","        'recall': recall,\n","        'confusion_matrix': cm\n","    }"],"metadata":{"id":"N-edwUr9gFIS"},"id":"N-edwUr9gFIS","execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_res_0 = forward_selection(X_0, y_0)\n","features_0 =  train_res_0['selected_features']\n","\n","train_res_1 = forward_selection(X_1, y_1)\n","features_1 =  train_res_1['selected_features']\n","\n","train_res_2 = forward_selection(X_2, y_2)\n","features_2 =  train_res_2['selected_features']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JzSCZc8lgIS4","executionInfo":{"status":"ok","timestamp":1741633608965,"user_tz":300,"elapsed":118368,"user":{"displayName":"Anusha Bhat","userId":"17918010741182048907"}},"outputId":"676c2664-910c-4cbd-c0ef-69c004bb288d"},"id":"JzSCZc8lgIS4","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Warning: Maximum number of iterations has been exceeded.\n","         Current function value: 0.162650\n","         Iterations: 35\n","Warning: Maximum number of iterations has been exceeded.\n","         Current function value: 0.000001\n","         Iterations: 35\n","Warning: Maximum number of iterations has been exceeded.\n","         Current function value: 0.132397\n","         Iterations: 35\n"]}]},{"cell_type":"code","source":["# Run cross validation on all cluster models\n","cv_res_0 = cross_validation_logistic(X_0_cv, y_0_cv, features_0)\n","model_0_cv = cv_res_0['best_model']\n","\n","cv_res_1 = cross_validation_logistic(X_1_cv, y_1_cv, features_1)\n","model_1_cv = cv_res_1['best_model']\n","\n","cv_res_2 = cross_validation_logistic(X_2_cv, y_2_cv, features_2)\n","model_2_cv = cv_res_2['best_model']"],"metadata":{"id":"WoEOaD1CgUGg"},"id":"WoEOaD1CgUGg","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Test models tuned with cross validation\n","test_res_0 = test_best_model_cv(X_0_test, y_0_test, model_0_cv, features_0)\n","test_res_1 = test_best_model_cv(X_1_test, y_1_test, model_1_cv, features_1)\n","test_res_2 = test_best_model_cv(X_2_test, y_2_test, model_2_cv, features_2)"],"metadata":{"id":"2sOerqb2gdg4"},"id":"2sOerqb2gdg4","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Compare selected features\n","print(\"Cluster 0 Features:\")\n","for feature in features_0:\n","    print(f\"- {feature}\")\n","\n","print(\"\\nCluster 1 Features:\")\n","for feature in features_1:\n","    print(f\"- {feature}\")\n","\n","print(\"\\nCluster 2 Features:\")\n","for feature in features_2:\n","    print(f\"- {feature}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"442QW70khSHe","executionInfo":{"status":"ok","timestamp":1741633642472,"user_tz":300,"elapsed":14,"user":{"displayName":"Anusha Bhat","userId":"17918010741182048907"}},"outputId":"27da4d48-fc35-4623-cd23-674f7c3fbf53"},"id":"442QW70khSHe","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cluster 0 Features:\n","- EnvironmentSatisfaction_Very High\n","- MonthlyIncome\n","- EducationField_Life Sciences\n","- JobRole_Research Scientist\n","- EnvironmentSatisfaction_Medium\n","- RelationshipSatisfaction_Medium\n","- JobRole_Manufacturing Director\n","- RelationshipSatisfaction_Very High\n","- JobSatisfaction_Very High\n","- JobSatisfaction_Low\n","- EducationField_Medical\n","- JobRole_Human Resources\n","- EducationField_Other\n","- EducationField_Technical Degree\n","- EducationField_Marketing\n","- JobSatisfaction_Medium\n","- WorkLifeBalance_Better\n","- WorkLifeBalance_Good\n","- WorkLifeBalance_Best\n","- YearsInCurrentRole\n","- JobRole_Manager\n","- JobRole_Research Director\n","- BusinessTravel_Travel_Frequently\n","- DailyRate\n","- JobRole_Sales Representative\n","- Department_Research & Development\n","- JobRole_Sales Executive\n","- Education_Doctor\n","- JobInvolvement_Low\n","\n","Cluster 1 Features:\n","- Department_Research & Development\n","- MonthlyIncome\n","- EducationField_Medical\n","- RelationshipSatisfaction_Medium\n","- EnvironmentSatisfaction_Very High\n","- WorkLifeBalance_Better\n","- WorkLifeBalance_Good\n","- MaritalStatus_Married\n","- WorkLifeBalance_Best\n","- Gender_Male\n","- JobRole_Human Resources\n","- JobSatisfaction_Very High\n","- JobRole_Research Scientist\n","- EnvironmentSatisfaction_Low\n","- JobInvolvement_Very High\n","- TrainingTimesLastYear\n","- Education_Doctor\n","- JobSatisfaction_Low\n","- PercentSalaryHike\n","- Education_College\n","- JobInvolvement_Medium\n","\n","Cluster 2 Features:\n","- PerformanceRating_Outstanding\n","- RelationshipSatisfaction_Very High\n","- RelationshipSatisfaction_Medium\n","- RelationshipSatisfaction_Low\n","- TotalWorkingYears\n","- Education_Master\n","- Education_College\n","- WorkLifeBalance_Better\n","- JobInvolvement_Low\n","- WorkLifeBalance_Good\n","- WorkLifeBalance_Best\n","- BusinessTravel_Travel_Rarely\n","- JobSatisfaction_Medium\n","- Education_Doctor\n","- EnvironmentSatisfaction_Very High\n","- JobSatisfaction_Low\n","- EducationField_Technical Degree\n","- JobSatisfaction_Very High\n","- EducationField_Medical\n","- EducationField_Life Sciences\n","- MonthlyRate\n","- Education_Below College\n","- EducationField_Marketing\n","- EducationField_Other\n","- JobInvolvement_Very High\n","- TrainingTimesLastYear\n","- PercentSalaryHike\n","- BusinessTravel_Travel_Frequently\n","- OverTime_Yes\n","- NumCompaniesWorked\n","- JobRole_Research Director\n"]}]},{"cell_type":"markdown","source":["Model Features Insights:\n","* Common Features: All clusters share features related to WorkLifeBalance, JobSatisfaction, and EducationField, but each cluster emphasizes different aspects (e.g., specific job roles or personal status indicators) that define their unique profiles.\n","* Distinct Features: Cluster 0 emphasizes job roles and satisfaction levels, Cluster 1 highlights personal and salary metrics, while Cluster 2 focuses on performance, experience, and overtime/work travel characteristics."],"metadata":{"id":"zpmanP4MivFR"},"id":"zpmanP4MivFR"},{"cell_type":"code","source":["# Need averages for comparison with other models\n","avg_acc_test = (test_res_0['accuracy'] + test_res_1['accuracy'] + test_res_2['accuracy']) / 3\n","avg_rec_test = (test_res_0['recall'] + test_res_1['recall'] + test_res_2['recall']) / 3"],"metadata":{"id":"FjXiwO6eg-Gm"},"id":"FjXiwO6eg-Gm","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a table of all of the metrics calculated\n","data = {\n","    'accuracy': [\n","        # For cluster 0\n","        train_res_0['accuracy'], cv_res_0['accuracy'], test_res_0['accuracy'],\n","\n","        # For cluster 1\n","        train_res_1['accuracy'], cv_res_1['accuracy'], test_res_1['accuracy'],\n","\n","        # For cluster 2\n","        train_res_2['accuracy'], cv_res_2['accuracy'], test_res_2['accuracy'],\n","\n","        # Average accuracy\n","        avg_acc_test\n","    ],\n","    'recall': [\n","        # For cluster 0\n","        train_res_0['recall'], cv_res_0['recall'], test_res_0['recall'],\n","        # For cluster 1\n","        train_res_1['recall'], cv_res_1['recall'], test_res_1['recall'],\n","\n","        # For cluster 2\n","        train_res_2['recall'], cv_res_2['recall'], test_res_2['recall'],\n","        # Average recall\n","        avg_rec_test\n","    ]\n","}\n","\n","# Define the row names\n","index = [\n","    # Cluster 0 results\n","    'cluster 0 train', 'cluster 0 cv', 'cluster 0 test',\n","\n","    # Cluster 1 results\n","    'cluster 1 train', 'cluster 1 cv', 'cluster 1 test',\n","\n","    # Cluster 2 results\n","    'cluster 2 train', 'cluster 2 cv', 'cluster 2 test',\n","\n","    # Average results\n","    'average test'\n","]\n","\n","\n","results_table = pd.DataFrame(data, index=index)\n","\n","\n","print(results_table)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i7ooe6w5hYpR","executionInfo":{"status":"ok","timestamp":1741633647566,"user_tz":300,"elapsed":33,"user":{"displayName":"Anusha Bhat","userId":"17918010741182048907"}},"outputId":"03ff1d6c-80f6-4630-d998-83135867a5e2"},"id":"i7ooe6w5hYpR","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                 accuracy    recall\n","cluster 0 train  0.937385  0.847134\n","cluster 0 cv     0.905797  0.765957\n","cluster 0 test   0.837838  0.100000\n","cluster 1 train  1.000000  1.000000\n","cluster 1 cv     0.950000  0.818182\n","cluster 1 test   0.868852  0.333333\n","cluster 2 train  0.939394  0.943820\n","cluster 2 cv     0.909091  0.882353\n","cluster 2 test   0.826087  0.666667\n","average test     0.844259  0.366667\n"]}]},{"cell_type":"markdown","source":["For each cluster, we first fit a baseline model with features that are selected using forward selection and AIC as the selection criterion. We then perform grid search cross-validation on that model to select regularization parameters (strength and type) and whether the model should use balanced class weights or not. This allows us to fine tune the parameters. Finally we tested the model that's returned from cross-validation. We see that the average test accuracy is approximately 84.43% and the average recall is approximately 36.67%. While the models perform reasonably well in terms of accuracy, there remains an opportunity to fine-tune them further for better recall using techniques besides SMOTE (e.g. undersampling the majority class or oversampling the minority class)."],"metadata":{"id":"1uD_U_vPi0RR"},"id":"1uD_U_vPi0RR"},{"cell_type":"markdown","id":"Ko4Wp8rM_HNO","metadata":{"id":"Ko4Wp8rM_HNO"},"source":["# Tree Models"]},{"cell_type":"code","source":["train_df = pd.read_csv(\"train_clustered.csv\")\n","test_df = pd.read_csv(\"test_clustered.csv\")"],"metadata":{"id":"mF8sLWmmSLWH"},"id":"mF8sLWmmSLWH","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#data pre processing\n","categorical_columns = [\n","    'BusinessTravel',\n","    'Department',\n","    'EducationField',\n","    'Gender',\n","    'JobRole',\n","    'MaritalStatus',\n","    'OverTime',\n","    'Education',\n","    'EnvironmentSatisfaction',\n","    'JobInvolvement',\n","    'JobSatisfaction',\n","    'RelationshipSatisfaction',\n","    'WorkLifeBalance',\n","    'PerformanceRating'\n","]\n","\n","for col in categorical_columns:\n","    train_df[col] = train_df[col].astype(str)\n","    test_df[col] = test_df[col].astype(str)\n","\n","combined_df = pd.concat([train_df, test_df], axis=0)\n","\n","# One-hot encoding catagorical variables\n","combined_df_encoded = pd.get_dummies(\n","    combined_df,\n","    columns=categorical_columns,\n","    drop_first=True\n",")\n","\n","# Split dataset into train and test\n","train_df_encoded = combined_df_encoded.loc[train_df.index].copy()\n","test_df_encoded  = combined_df_encoded.loc[test_df.index].copy()\n","\n","# Set attrition as a numerical varable (binary)\n","train_df_encoded['Attrition'] = train_df_encoded['Attrition'].map({'No': 0, 'Yes': 1})\n","test_df_encoded['Attrition']  = test_df_encoded['Attrition'].map({'No': 0, 'Yes': 1})\n","\n","missing_cols = set(train_df_encoded.columns) - set(test_df_encoded.columns)\n","for col in missing_cols:\n","    test_df_encoded[col] = 0\n","\n","extra_cols = set(test_df_encoded.columns) - set(train_df_encoded.columns)\n","test_df_encoded.drop(columns=extra_cols, inplace=True)\n","\n","# Split the clusters for train and test dataframes\n","unique_clusters = train_df_encoded['Cluster'].unique()\n","\n","train_clusters = {\n","    cluster: train_df_encoded[train_df_encoded['Cluster'] == cluster].drop(columns=['Cluster'])\n","    for cluster in unique_clusters\n","}\n","test_clusters = {\n","    cluster: test_df_encoded[test_df_encoded['Cluster'] == cluster].drop(columns=['Cluster'])\n","    for cluster in unique_clusters if cluster in test_df_encoded['Cluster'].unique()\n","}"],"metadata":{"id":"nmImFptHSXqJ"},"id":"nmImFptHSXqJ","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Applies Cross Validation and SMOTE to variables\n","def cross_validate_model(model, X, y, cluster_id):\n","    if len(y.unique()) < 2:\n","        print(f\"Skipping CV for Cluster {cluster_id} (only one class).\")\n","        return\n","\n","    n_splits = min(5, np.bincount(y).min())\n","    if n_splits < 2:\n","        print(f\"Skipping CV for Cluster {cluster_id} (not enough samples).\")\n","        return\n","\n","    pipeline = Pipeline([\n","        ('smote', SMOTE(random_state=42)),\n","        ('clf', model)\n","    ])\n","\n","    cv = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n","    scores = cross_val_score(\n","        pipeline, X, y,\n","        cv=cv, scoring='accuracy', error_score='raise'\n","    )\n","    print(f\"Cluster {cluster_id} - {model.__class__.__name__} CV Accuracy: \"\n","          f\"{scores.mean():.4f} (+/- {scores.std():.4f})\")\n"],"metadata":{"id":"PUTqBvnaSy-G"},"id":"PUTqBvnaSy-G","execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_model(df_train, cluster_id):\n","\n","    X_train = df_train.drop(columns=['Attrition'])\n","    y_train = df_train['Attrition']\n","\n","    if len(y_train.unique()) < 2:\n","        print(f\"Skipping training for Cluster {cluster_id} (only one class).\")\n","        return None, None\n","\n","    #random forest classifier\n","    rf_model_params = RandomForestClassifier(\n","        n_estimators=100,\n","        max_depth=5,\n","        min_samples_leaf=5,\n","        random_state=42\n","    )\n","\n","    # Gradient Boosting\n","    gb_model_params = GradientBoostingClassifier(\n","        n_estimators=200,\n","        learning_rate=0.01,\n","        max_depth=3,\n","        min_samples_leaf=5,\n","        random_state=42\n","    )\n","\n","    # Apply cross validation\n","    cross_validate_model(rf_model_params, X_train, y_train, cluster_id)\n","    cross_validate_model(gb_model_params, X_train, y_train, cluster_id)\n","\n","    rf_pipeline = Pipeline([\n","        ('smote', SMOTE(random_state=42)),\n","        ('clf', rf_model_params)\n","    ])\n","    rf_pipeline.fit(X_train, y_train)\n","    rf_model = rf_pipeline.named_steps['clf']\n","\n","    gb_pipeline = Pipeline([\n","        ('smote', SMOTE(random_state=42)),\n","        ('clf', gb_model_params)\n","    ])\n","    gb_pipeline.fit(X_train, y_train)\n","    gb_model = gb_pipeline.named_steps['clf']\n","\n","    return rf_model, gb_model\n","\n","\n","def test_model(rf, gb, df_test, cluster_id):\n","    if rf is None or gb is None:\n","        print(f\"Skipping testing for Cluster {cluster_id} (model not trained).\")\n","        return\n","\n","    X_test = df_test.drop(columns=['Attrition'])\n","    y_test = df_test['Attrition']\n","\n","    if len(y_test.unique()) < 2:\n","        print(f\"Skipping testing for Cluster {cluster_id} (only one class).\")\n","        return\n","\n","    # Random Forest Model Evaluation\n","    y_pred_rf = rf.predict(X_test)\n","    print(f\"\\nCluster {cluster_id} - Random Forest Test Accuracy: {accuracy_score(y_test, y_pred_rf):.4f}\")\n","    print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_rf))\n","    print(\"Classification Report:\\n\", classification_report(y_test, y_pred_rf))\n","\n","    # Gradient Boosting Evaluation\n","    y_pred_gb = gb.predict(X_test)\n","    print(f\"Cluster {cluster_id} - Gradient Boosting Test Accuracy: {accuracy_score(y_test, y_pred_gb):.4f}\")\n","    print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_gb))\n","    print(\"Classification Report:\\n\", classification_report(y_test, y_pred_gb))\n","\n","trained_models = {}\n","for cluster in unique_clusters:\n","    rf_model, gb_model = train_model(train_clusters[cluster], cluster)\n","    trained_models[cluster] = (rf_model, gb_model)\n","\n","    if cluster in test_clusters:\n","        test_model(rf_model, gb_model, test_clusters[cluster], cluster)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cINDwxkSIfbi","executionInfo":{"status":"ok","timestamp":1741478215848,"user_tz":360,"elapsed":21809,"user":{"displayName":"Nidhi Pareddy","userId":"12515785188850519552"}},"outputId":"d61345a3-b207-4e8c-f12c-b1bbda06fa31"},"id":"cINDwxkSIfbi","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cluster 2 - RandomForestClassifier CV Accuracy: 0.8367 (+/- 0.0286)\n","Cluster 2 - GradientBoostingClassifier CV Accuracy: 0.8163 (+/- 0.0375)\n","\n","Cluster 2 - Random Forest Test Accuracy: 0.9339\n","Confusion Matrix:\n"," [[100   2]\n"," [  6  13]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.94      0.98      0.96       102\n","           1       0.87      0.68      0.76        19\n","\n","    accuracy                           0.93       121\n","   macro avg       0.91      0.83      0.86       121\n","weighted avg       0.93      0.93      0.93       121\n","\n","Cluster 2 - Gradient Boosting Test Accuracy: 0.9174\n","Confusion Matrix:\n"," [[99  3]\n"," [ 7 12]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.93      0.97      0.95       102\n","           1       0.80      0.63      0.71        19\n","\n","    accuracy                           0.92       121\n","   macro avg       0.87      0.80      0.83       121\n","weighted avg       0.91      0.92      0.91       121\n","\n","Cluster 1 - RandomForestClassifier CV Accuracy: 0.8375 (+/- 0.0369)\n","Cluster 1 - GradientBoostingClassifier CV Accuracy: 0.8041 (+/- 0.0279)\n","\n","Cluster 1 - Random Forest Test Accuracy: 0.9018\n","Confusion Matrix:\n"," [[128   5]\n"," [ 11  19]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.92      0.96      0.94       133\n","           1       0.79      0.63      0.70        30\n","\n","    accuracy                           0.90       163\n","   macro avg       0.86      0.80      0.82       163\n","weighted avg       0.90      0.90      0.90       163\n","\n","Cluster 1 - Gradient Boosting Test Accuracy: 0.9080\n","Confusion Matrix:\n"," [[126   7]\n"," [  8  22]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.94      0.95      0.94       133\n","           1       0.76      0.73      0.75        30\n","\n","    accuracy                           0.91       163\n","   macro avg       0.85      0.84      0.84       163\n","weighted avg       0.91      0.91      0.91       163\n","\n","Cluster 0 - RandomForestClassifier CV Accuracy: 0.8309 (+/- 0.0239)\n","Cluster 0 - GradientBoostingClassifier CV Accuracy: 0.8038 (+/- 0.0214)\n","\n","Cluster 0 - Random Forest Test Accuracy: 0.8618\n","Confusion Matrix:\n"," [[235  23]\n"," [ 19  27]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.93      0.91      0.92       258\n","           1       0.54      0.59      0.56        46\n","\n","    accuracy                           0.86       304\n","   macro avg       0.73      0.75      0.74       304\n","weighted avg       0.87      0.86      0.86       304\n","\n","Cluster 0 - Gradient Boosting Test Accuracy: 0.8355\n","Confusion Matrix:\n"," [[231  27]\n"," [ 23  23]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.91      0.90      0.90       258\n","           1       0.46      0.50      0.48        46\n","\n","    accuracy                           0.84       304\n","   macro avg       0.68      0.70      0.69       304\n","weighted avg       0.84      0.84      0.84       304\n","\n"]}]},{"cell_type":"markdown","source":["From the accuracies, we see that the Random Forest Classifier has better accuracy over all clusters. In addition, we see that both models have the highest accuracy for cluster 2.\n","When looking at the classification reports, we see that relcal is higher for 0 (predicting no) over 1 (predicting yes). This can be because of the highly imbalanced dataset which favors no attrition over attrition. Therefore, these models were trained on a skewed dataset. The recall is also lower for predicting yes over no which may also be caused for the above reason."],"metadata":{"id":"_LzrqPmSSHvx"},"id":"_LzrqPmSSHvx"},{"cell_type":"markdown","source":["# Cluster-wise Regression"],"metadata":{"id":"nzKBJq7Y0cju"},"id":"nzKBJq7Y0cju"},{"cell_type":"code","source":["train_df = pd.read_csv(\"train.csv\")\n","test_df = pd.read_csv(\"test.csv\")"],"metadata":{"id":"rTpkiwb50oku"},"id":"rTpkiwb50oku","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Identify categorical and numerical columns\n","categorical_cols = [col for col in train_df.columns if train_df[col].dtype == 'object' and col != 'Attrition']\n","numerical_cols = [col for col in train_df.columns if train_df[col].dtype != 'object' and col != 'Attrition']"],"metadata":{"id":"lrga4QpR0pB5"},"id":"lrga4QpR0pB5","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create copy of original dataframe\n","train_original = train_df.copy()\n","test_original = test_df.copy()"],"metadata":{"id":"Ay2Pcv_e0qx-"},"id":"Ay2Pcv_e0qx-","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Encode categorical features\n","categorical_indices = []\n","for i, col in enumerate(categorical_cols):\n","    le = LabelEncoder()\n","    train_df[col] = le.fit_transform(train_df[col])\n","    test_df[col] = le.transform(test_df[col])\n","    categorical_indices.append(train_df.columns.get_loc(col))"],"metadata":{"id":"Yfr0Sicu0sC4"},"id":"Yfr0Sicu0sC4","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Scale numerical features\n","scaler = MinMaxScaler()\n","train_df[numerical_cols] = scaler.fit_transform(train_df[numerical_cols])\n","test_df[numerical_cols] = scaler.transform(test_df[numerical_cols])"],"metadata":{"id":"qRIoQ6jR0tYi"},"id":"qRIoQ6jR0tYi","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Target variable\n","y_train = train_df['Attrition'].replace({'Yes': 1, 'No': 0})\n","y_test = test_df['Attrition'].replace({'Yes': 1, 'No': 0})\n","\n","# Prepare data for clustering\n","X_train = train_df.drop('Attrition', axis=1)\n","X_test = test_df.drop('Attrition', axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4o0Ztch10wCJ","outputId":"f6eb97df-05f5-486f-a106-f792a7dd63fd","executionInfo":{"status":"ok","timestamp":1741566196224,"user_tz":300,"elapsed":7,"user":{"displayName":"Mahima Masetty","userId":"09020740018622078142"}}},"id":"4o0Ztch10wCJ","execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-14-62f08317d35d>:2: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  y_train = train_df['Attrition'].replace({'Yes': 1, 'No': 0})\n","<ipython-input-14-62f08317d35d>:3: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n","  y_test = test_df['Attrition'].replace({'Yes': 1, 'No': 0})\n"]}]},{"cell_type":"code","source":["X_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":256},"id":"bwDVhJmy0xbH","outputId":"ad8e5ec9-9bce-4a95-be34-515bd9b1a6cc","executionInfo":{"status":"ok","timestamp":1741566198687,"user_tz":300,"elapsed":42,"user":{"displayName":"Mahima Masetty","userId":"09020740018622078142"}}},"id":"bwDVhJmy0xbH","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Age  BusinessTravel  DailyRate  Department  DistanceFromHome  \\\n","0  0.690476               2   0.803725           2          0.035714   \n","1  0.095238               2   0.351719           1          0.035714   \n","2  0.666667               2   0.217049           2          0.071429   \n","3  0.166667               2   0.371777           2          0.428571   \n","4  0.595238               1   0.643266           1          0.285714   \n","\n","   Education  EducationField  EnvironmentSatisfaction  Gender  HourlyRate  \\\n","0          4               1                        2       0    0.242857   \n","1          1               5                        0       1    1.000000   \n","2          1               2                        1       1    0.314286   \n","3          1               3                        2       1    0.142857   \n","4          3               3                        3       1    0.600000   \n","\n","   ...  OverTime  PercentSalaryHike  PerformanceRating  \\\n","0  ...         0           0.214286                  0   \n","1  ...         0           0.214286                  0   \n","2  ...         0           0.071429                  0   \n","3  ...         0           0.000000                  0   \n","4  ...         1           0.142857                  0   \n","\n","   RelationshipSatisfaction  StockOptionLevel  TotalWorkingYears  \\\n","0                         0          1.000000              0.725   \n","1                         0          0.333333              0.075   \n","2                         3          0.333333              0.575   \n","3                         0          0.000000              0.175   \n","4                         2          0.333333              0.250   \n","\n","   TrainingTimesLastYear  WorkLifeBalance  YearsInCurrentRole  \\\n","0               0.333333                2            0.117647   \n","1               0.333333                2            0.058824   \n","2               0.500000                2            0.529412   \n","3               0.166667                2            0.235294   \n","4               0.500000                2            0.411765   \n","\n","   YearsSinceLastPromotion  \n","0                 0.066667  \n","1                 0.133333  \n","2                 0.266667  \n","3                 0.000000  \n","4                 0.266667  \n","\n","[5 rows x 27 columns]"],"text/html":["\n","  <div id=\"df-57ef1790-dd2c-4d2e-a69e-54e97297668d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>BusinessTravel</th>\n","      <th>DailyRate</th>\n","      <th>Department</th>\n","      <th>DistanceFromHome</th>\n","      <th>Education</th>\n","      <th>EducationField</th>\n","      <th>EnvironmentSatisfaction</th>\n","      <th>Gender</th>\n","      <th>HourlyRate</th>\n","      <th>...</th>\n","      <th>OverTime</th>\n","      <th>PercentSalaryHike</th>\n","      <th>PerformanceRating</th>\n","      <th>RelationshipSatisfaction</th>\n","      <th>StockOptionLevel</th>\n","      <th>TotalWorkingYears</th>\n","      <th>TrainingTimesLastYear</th>\n","      <th>WorkLifeBalance</th>\n","      <th>YearsInCurrentRole</th>\n","      <th>YearsSinceLastPromotion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.690476</td>\n","      <td>2</td>\n","      <td>0.803725</td>\n","      <td>2</td>\n","      <td>0.035714</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0.242857</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0.214286</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.000000</td>\n","      <td>0.725</td>\n","      <td>0.333333</td>\n","      <td>2</td>\n","      <td>0.117647</td>\n","      <td>0.066667</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.095238</td>\n","      <td>2</td>\n","      <td>0.351719</td>\n","      <td>1</td>\n","      <td>0.035714</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0.214286</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.333333</td>\n","      <td>0.075</td>\n","      <td>0.333333</td>\n","      <td>2</td>\n","      <td>0.058824</td>\n","      <td>0.133333</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.666667</td>\n","      <td>2</td>\n","      <td>0.217049</td>\n","      <td>2</td>\n","      <td>0.071429</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.314286</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0.071429</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.333333</td>\n","      <td>0.575</td>\n","      <td>0.500000</td>\n","      <td>2</td>\n","      <td>0.529412</td>\n","      <td>0.266667</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.166667</td>\n","      <td>2</td>\n","      <td>0.371777</td>\n","      <td>2</td>\n","      <td>0.428571</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0.142857</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0.000000</td>\n","      <td>0.175</td>\n","      <td>0.166667</td>\n","      <td>2</td>\n","      <td>0.235294</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.595238</td>\n","      <td>1</td>\n","      <td>0.643266</td>\n","      <td>1</td>\n","      <td>0.285714</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>0.600000</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0.142857</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0.333333</td>\n","      <td>0.250</td>\n","      <td>0.500000</td>\n","      <td>2</td>\n","      <td>0.411765</td>\n","      <td>0.266667</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 27 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57ef1790-dd2c-4d2e-a69e-54e97297668d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-57ef1790-dd2c-4d2e-a69e-54e97297668d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-57ef1790-dd2c-4d2e-a69e-54e97297668d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-024535f2-d2f2-4713-aa22-73c7c7bfd28c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-024535f2-d2f2-4713-aa22-73c7c7bfd28c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-024535f2-d2f2-4713-aa22-73c7c7bfd28c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["y_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"eS7_u1Lz0xxA","outputId":"c8104ea6-652a-48f6-8bca-5d0480f62288","executionInfo":{"status":"ok","timestamp":1741566199913,"user_tz":300,"elapsed":4,"user":{"displayName":"Mahima Masetty","userId":"09020740018622078142"}}},"id":"eS7_u1Lz0xxA","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0\n","1    0\n","2    0\n","3    0\n","4    0\n","Name: Attrition, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Attrition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["np.random.seed(7)\n","\n","# Define parameters\n","k = 3  # Number of clusters\n","tries = 100  # Number of initialization attempts\n","niter = 100  # Maximum number of iterations\n","\n","# Find the best k-prototypes clustering\n","best_accuracy = 0\n","best_c = None\n","best_models = []\n","best_cluster_labels = None\n","\n","for l in range(tries):\n","    # Initialize KPrototypes\n","    kproto = KPrototypes(n_clusters=k, init='Cao', n_init=1, random_state=l)\n","\n","    # Fit KPrototypes\n","    cluster_labels = kproto.fit_predict(X_train.values, categorical=categorical_indices)\n","\n","    for i in range(niter):\n","        # Initialize predictions and probabilities matrices\n","        predictions = np.zeros((X_train.shape[0], k))\n","        probabilities = np.zeros((X_train.shape[0], k))\n","\n","        # Fit logistic regression models for each cluster\n","        models = []\n","        for j in range(k):\n","            cluster_mask = (cluster_labels == j)\n","            if sum(cluster_mask) > 0:  # Ensure there are samples in the cluster\n","                cluster_X = X_train[cluster_mask]\n","                cluster_y = y_train[cluster_mask]\n","\n","                # Use balanced class weights for imbalanced data\n","                model = LogisticRegression(max_iter=1000, class_weight='balanced', random_state=42)\n","                try:\n","                    model.fit(cluster_X, cluster_y)\n","                    models.append(model)\n","\n","                    # Predict probabilities for positive class (Attrition=Yes)\n","                    probs = model.predict_proba(X_train)[:, 1]\n","                    probabilities[:, j] = probs\n","                    predictions[:, j] = model.predict(X_train)\n","                except Exception as e:\n","                    print(f\"Error fitting model for cluster {j}: {e}\")\n","                    models.append(None)\n","                    continue\n","            else:\n","                print(f\"No samples in cluster {j}\")\n","                models.append(None)\n","\n","        # Reassign data points to clusters based on probability of correct prediction\n","        new_labels = np.zeros(X_train.shape[0])\n","        for idx in range(X_train.shape[0]):\n","            actual = y_train[idx]\n","            # For each point, find the cluster whose model gives highest probability of correct class\n","            correct_probs = []\n","            for j in range(k):\n","                if models[j] is not None:\n","                    # For attrition=yes (1), use the probability directly\n","                    # For attrition=no (0), use 1 - probability\n","                    correct_prob = probabilities[idx, j] if actual == 1 else 1 - probabilities[idx, j]\n","                    correct_probs.append(correct_prob)\n","                else:\n","                    correct_probs.append(-1)\n","\n","            # Assign to cluster with highest probability of correct prediction\n","            valid_clusters = [j for j in range(k) if models[j] is not None]\n","            if valid_clusters:\n","                valid_probs = [correct_probs[j] for j in valid_clusters]\n","                new_labels[idx] = valid_clusters[np.argmax(valid_probs)]\n","            else:\n","                # If no valid models keep current assignment\n","                new_labels[idx] = cluster_labels[idx]\n","\n","\n","    # Calculate accuracy for this initialization\n","    final_preds = np.zeros(X_train.shape[0])\n","    for idx in range(X_train.shape[0]):\n","        cluster = int(cluster_labels[idx])\n","        if models[cluster] is not None:\n","            final_preds[idx] = models[cluster].predict(X_train.iloc[idx:idx+1])[0]\n","\n","    accuracy = accuracy_score(y_train, final_preds)\n","\n","    # Update best solution\n","    if accuracy > best_accuracy:\n","        best_accuracy = accuracy\n","        best_c = cluster_labels.copy()\n","        best_models = models.copy()\n","        best_cluster_labels = cluster_labels"],"metadata":{"id":"PIyuf1LS0ypR"},"id":"PIyuf1LS0ypR","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Add cluster labels to original training dataframe\n","train_original['Cluster'] = best_cluster_labels"],"metadata":{"id":"WSDCE-Zm01sk"},"id":"WSDCE-Zm01sk","execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_original.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":325},"id":"hb5eLZSy02zH","outputId":"e08bc7a6-a1ab-4502-c1f3-a2a90f52fce0","executionInfo":{"status":"ok","timestamp":1741567986382,"user_tz":300,"elapsed":28,"user":{"displayName":"Mahima Masetty","userId":"09020740018622078142"}}},"id":"hb5eLZSy02zH","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Age     BusinessTravel  DailyRate              Department  \\\n","0   47      Travel_Rarely       1225                   Sales   \n","1   22      Travel_Rarely        594  Research & Development   \n","2   46      Travel_Rarely        406                   Sales   \n","3   25      Travel_Rarely        622                   Sales   \n","4   43  Travel_Frequently       1001  Research & Development   \n","\n","   DistanceFromHome      Education    EducationField EnvironmentSatisfaction  \\\n","0                 2         Master     Life Sciences                  Medium   \n","1                 2  Below College  Technical Degree                    High   \n","2                 3  Below College         Marketing                     Low   \n","3                13  Below College           Medical                  Medium   \n","4                 9         Doctor           Medical               Very High   \n","\n","   Gender  HourlyRate  ... PerformanceRating RelationshipSatisfaction  \\\n","0  Female          47  ...         Excellent                     High   \n","1    Male         100  ...         Excellent                     High   \n","2    Male          52  ...         Excellent                Very High   \n","3    Male          40  ...         Excellent                     High   \n","4    Male          72  ...         Excellent                   Medium   \n","\n","  StockOptionLevel TotalWorkingYears  TrainingTimesLastYear  WorkLifeBalance  \\\n","0                3                29                      2           Better   \n","1                1                 3                      2           Better   \n","2                1                23                      3           Better   \n","3                0                 7                      1           Better   \n","4                1                10                      3           Better   \n","\n","   YearsInCurrentRole YearsSinceLastPromotion  Attrition Cluster  \n","0                   2                       1         No       0  \n","1                   1                       2         No       2  \n","2                   9                       4         No       0  \n","3                   4                       0         No       2  \n","4                   7                       4         No       2  \n","\n","[5 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-2707293c-e79a-4cf6-8dbf-623e21451105\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>BusinessTravel</th>\n","      <th>DailyRate</th>\n","      <th>Department</th>\n","      <th>DistanceFromHome</th>\n","      <th>Education</th>\n","      <th>EducationField</th>\n","      <th>EnvironmentSatisfaction</th>\n","      <th>Gender</th>\n","      <th>HourlyRate</th>\n","      <th>...</th>\n","      <th>PerformanceRating</th>\n","      <th>RelationshipSatisfaction</th>\n","      <th>StockOptionLevel</th>\n","      <th>TotalWorkingYears</th>\n","      <th>TrainingTimesLastYear</th>\n","      <th>WorkLifeBalance</th>\n","      <th>YearsInCurrentRole</th>\n","      <th>YearsSinceLastPromotion</th>\n","      <th>Attrition</th>\n","      <th>Cluster</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>47</td>\n","      <td>Travel_Rarely</td>\n","      <td>1225</td>\n","      <td>Sales</td>\n","      <td>2</td>\n","      <td>Master</td>\n","      <td>Life Sciences</td>\n","      <td>Medium</td>\n","      <td>Female</td>\n","      <td>47</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>22</td>\n","      <td>Travel_Rarely</td>\n","      <td>594</td>\n","      <td>Research &amp; Development</td>\n","      <td>2</td>\n","      <td>Below College</td>\n","      <td>Technical Degree</td>\n","      <td>High</td>\n","      <td>Male</td>\n","      <td>100</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>Better</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>No</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>46</td>\n","      <td>Travel_Rarely</td>\n","      <td>406</td>\n","      <td>Sales</td>\n","      <td>3</td>\n","      <td>Below College</td>\n","      <td>Marketing</td>\n","      <td>Low</td>\n","      <td>Male</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>Very High</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>9</td>\n","      <td>4</td>\n","      <td>No</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>25</td>\n","      <td>Travel_Rarely</td>\n","      <td>622</td>\n","      <td>Sales</td>\n","      <td>13</td>\n","      <td>Below College</td>\n","      <td>Medical</td>\n","      <td>Medium</td>\n","      <td>Male</td>\n","      <td>40</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>High</td>\n","      <td>0</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>Better</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>No</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>43</td>\n","      <td>Travel_Frequently</td>\n","      <td>1001</td>\n","      <td>Research &amp; Development</td>\n","      <td>9</td>\n","      <td>Doctor</td>\n","      <td>Medical</td>\n","      <td>Very High</td>\n","      <td>Male</td>\n","      <td>72</td>\n","      <td>...</td>\n","      <td>Excellent</td>\n","      <td>Medium</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>Better</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>No</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 29 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2707293c-e79a-4cf6-8dbf-623e21451105')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2707293c-e79a-4cf6-8dbf-623e21451105 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2707293c-e79a-4cf6-8dbf-623e21451105');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-438f3606-34a5-41b1-8183-2d7cb2c64b7d\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-438f3606-34a5-41b1-8183-2d7cb2c64b7d')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-438f3606-34a5-41b1-8183-2d7cb2c64b7d button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_original"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# Function to predict using the best models\n","def predict_with_best_models(X, models, cluster_labels):\n","    predictions = np.zeros(X.shape[0])\n","    for idx in range(X.shape[0]):\n","        cluster = int(cluster_labels[idx])\n","        if models[cluster] is not None:\n","            predictions[idx] = models[cluster].predict(X.iloc[idx:idx+1])[0]\n","    return predictions\n","\n","# Predict on training data\n","train_preds = predict_with_best_models(X_train, best_models, best_cluster_labels)\n","train_accuracy = accuracy_score(y_train, train_preds)\n","train_recall = recall_score(y_train, train_preds)\n","\n","# Cluster assignment for test data\n","test_distances = np.zeros((X_test.shape[0], k))\n","for j in range(k):\n","    cluster_center = X_train[best_cluster_labels == j].mean().values\n","    for i in range(X_test.shape[0]):\n","        # Euclidean distance for assignment\n","        test_distances[i, j] = np.sum((X_test.iloc[i].values - cluster_center) ** 2)\n","\n","test_cluster_labels = np.argmin(test_distances, axis=1)\n","\n","# Predict on test data\n","test_preds = np.zeros(X_test.shape[0])\n","for idx in range(X_test.shape[0]):\n","    cluster = int(test_cluster_labels[idx])\n","    if best_models[cluster] is not None:\n","        test_preds[idx] = best_models[cluster].predict(X_test.iloc[idx:idx+1])[0]\n","\n","test_accuracy = accuracy_score(y_test, test_preds)\n","test_recall = recall_score(y_test, test_preds)\n","\n","# Add cluster labels to original test dataframe\n","test_original['Cluster'] = test_cluster_labels\n","\n","# Print results\n","print(f\"Train Accuracy: {train_accuracy:.4f}\")\n","print(f\"Train Recall: {train_recall:.4f}\")\n","print(f\"Test Accuracy: {test_accuracy:.4f}\")\n","print(f\"Test Recall: {test_recall:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BEvgUF5m04nQ","outputId":"6932d7c3-ab5c-403e-bc7b-eb97ca29f7c0","executionInfo":{"status":"ok","timestamp":1741567989233,"user_tz":300,"elapsed":2852,"user":{"displayName":"Mahima Masetty","userId":"09020740018622078142"}}},"id":"BEvgUF5m04nQ","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Accuracy: 0.7798\n","Train Recall: 0.7842\n","Test Accuracy: 0.7517\n","Test Recall: 0.7021\n"]}]},{"cell_type":"code","source":["# Redifining cols\n","numerical_cols = train_original.select_dtypes(include=['int', 'float']).columns.tolist()\n","categorical_cols = train_original.select_dtypes(include=['object']).columns.tolist()\n"],"metadata":{"id":"iyeQI50B5Q9f"},"id":"iyeQI50B5Q9f","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Function to analyze clusters\n","def analyze_clusters(df, categorical_cols, numerical_cols):\n","\n","    # Cluster size distribution\n","    print(\"Cluster Size Distribution:\\n\", df['Cluster'].value_counts(), \"\\n\")\n","\n","    # Summary statistics for numerical features\n","    print(\"\\nNumerical Feature Summary by Cluster:\")\n","    print(df.groupby('Cluster')[numerical_cols].agg(['mean', 'std', 'median']))\n","\n","    # Category distribution for each cluster\n","    print(\"\\nCategorical Feature Distribution by Cluster:\")\n","    for col in categorical_cols:\n","        print(f\"\\nFeature: {col}\")\n","        print(df.groupby('Cluster')[col].value_counts(normalize=True))  # Relative frequencies\n","        print(\"-\" * 50)\n","\n","analyze_clusters(train_original, categorical_cols, numerical_cols)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zWYyXutf07Px","outputId":"a21fbc5a-3e1c-442e-f802-a38192d6a1d8","executionInfo":{"status":"ok","timestamp":1741573953339,"user_tz":300,"elapsed":141,"user":{"displayName":"Mahima Masetty","userId":"09020740018622078142"}}},"id":"zWYyXutf07Px","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cluster Size Distribution:\n"," Cluster\n","2    579\n","1    347\n","0    250\n","Name: count, dtype: int64 \n","\n","\n","Numerical Feature Summary by Cluster:\n","               Age                    DailyRate                     \\\n","              mean       std median        mean         std median   \n","Cluster                                                              \n","0        46.260000  7.296393   46.0  787.948000  399.952981  731.0   \n","1        37.216138  7.600728   36.0  870.403458  392.738685  916.0   \n","2        32.868739  7.714636   32.0  771.117444  402.934058  746.0   \n","\n","        DistanceFromHome                  HourlyRate  ... TotalWorkingYears  \\\n","                    mean       std median       mean  ...            median   \n","Cluster                                               ...                     \n","0               7.432000  7.401656    5.0  65.372000  ...              21.0   \n","1              14.043228  9.050653   13.0  67.452450  ...              10.0   \n","2               7.381693  6.684777    6.0  64.385147  ...               6.0   \n","\n","        TrainingTimesLastYear                  YearsInCurrentRole            \\\n","                         mean       std median               mean       std   \n","Cluster                                                                       \n","0                    2.716000  1.193752    3.0           6.516000  4.154852   \n","1                    2.755043  1.240197    3.0           4.706052  3.464109   \n","2                    2.782383  1.293168    3.0           2.960276  2.696302   \n","\n","               YearsSinceLastPromotion                   \n","        median                    mean       std median  \n","Cluster                                                  \n","0          7.0                4.564000  4.621182    3.0  \n","1          4.0                2.155620  2.949281    1.0  \n","2          2.0                1.170984  1.769637    1.0  \n","\n","[3 rows x 39 columns]\n","\n","Categorical Feature Distribution by Cluster:\n","\n","Feature: BusinessTravel\n","Cluster  BusinessTravel   \n","0        Travel_Rarely        0.732000\n","         Travel_Frequently    0.180000\n","         Non-Travel           0.088000\n","1        Travel_Rarely        0.703170\n","         Travel_Frequently    0.184438\n","         Non-Travel           0.112392\n","2        Travel_Rarely        0.692573\n","         Travel_Frequently    0.200345\n","         Non-Travel           0.107081\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: Department\n","Cluster  Department            \n","0        Research & Development    0.716000\n","         Sales                     0.252000\n","         Human Resources           0.032000\n","1        Sales                     0.613833\n","         Research & Development    0.354467\n","         Human Resources           0.031700\n","2        Research & Development    0.797927\n","         Sales                     0.151986\n","         Human Resources           0.050086\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: Education\n","Cluster  Education    \n","0        Master           0.420000\n","         Bachelor         0.284000\n","         College          0.144000\n","         Below College    0.108000\n","         Doctor           0.044000\n","1        Bachelor         0.438040\n","         Master           0.247839\n","         College          0.210375\n","         Below College    0.072046\n","         Doctor           0.031700\n","2        Bachelor         0.400691\n","         Master           0.222798\n","         College          0.198618\n","         Below College    0.151986\n","         Doctor           0.025907\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: EducationField\n","Cluster  EducationField  \n","0        Life Sciences       0.400000\n","         Medical             0.324000\n","         Marketing           0.108000\n","         Technical Degree    0.092000\n","         Other               0.056000\n","         Human Resources     0.020000\n","1        Life Sciences       0.360231\n","         Medical             0.279539\n","         Marketing           0.224784\n","         Technical Degree    0.092219\n","         Other               0.031700\n","         Human Resources     0.011527\n","2        Life Sciences       0.438687\n","         Medical             0.321244\n","         Technical Degree    0.103627\n","         Other               0.063903\n","         Marketing           0.050086\n","         Human Resources     0.022453\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: EnvironmentSatisfaction\n","Cluster  EnvironmentSatisfaction\n","0        High                       0.364000\n","         Low                        0.240000\n","         Very High                  0.240000\n","         Medium                     0.156000\n","1        Very High                  0.380403\n","         High                       0.239193\n","         Medium                     0.210375\n","         Low                        0.170029\n","2        High                       0.348877\n","         Very High                  0.269430\n","         Medium                     0.191710\n","         Low                        0.189983\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: Gender\n","Cluster  Gender\n","0        Male      0.632000\n","         Female    0.368000\n","1        Female    0.622478\n","         Male      0.377522\n","2        Male      0.716753\n","         Female    0.283247\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: JobInvolvement\n","Cluster  JobInvolvement\n","0        High              0.604000\n","         Medium            0.248000\n","         Very High         0.096000\n","         Low               0.052000\n","1        High              0.610951\n","         Medium            0.242075\n","         Very High         0.095101\n","         Low               0.051873\n","2        High              0.590674\n","         Medium            0.255613\n","         Very High         0.096718\n","         Low               0.056995\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: JobRole\n","Cluster  JobRole                  \n","0        Manager                      0.300000\n","         Research Director            0.204000\n","         Healthcare Representative    0.164000\n","         Sales Executive              0.136000\n","         Manufacturing Director       0.100000\n","         Research Scientist           0.060000\n","         Laboratory Technician        0.024000\n","         Human Resources              0.008000\n","         Sales Representative         0.004000\n","1        Sales Executive              0.567723\n","         Research Scientist           0.115274\n","         Healthcare Representative    0.077810\n","         Manufacturing Director       0.072046\n","         Laboratory Technician        0.054755\n","         Sales Representative         0.037464\n","         Human Resources              0.028818\n","         Research Director            0.025937\n","         Manager                      0.020173\n","2        Laboratory Technician        0.328152\n","         Research Scientist           0.284974\n","         Manufacturing Director       0.108808\n","         Sales Representative         0.079447\n","         Sales Executive              0.072539\n","         Healthcare Representative    0.069085\n","         Human Resources              0.050086\n","         Research Director            0.005181\n","         Manager                      0.001727\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: JobSatisfaction\n","Cluster  JobSatisfaction\n","0        Very High          0.392000\n","         High               0.232000\n","         Medium             0.196000\n","         Low                0.180000\n","1        High               0.314121\n","         Very High          0.288184\n","         Low                0.224784\n","         Medium             0.172911\n","2        High               0.322971\n","         Very High          0.290155\n","         Low                0.202073\n","         Medium             0.184801\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: MaritalStatus\n","Cluster  MaritalStatus\n","0        Married          0.468000\n","         Single           0.316000\n","         Divorced         0.216000\n","1        Married          0.484150\n","         Divorced         0.270893\n","         Single           0.244957\n","2        Married          0.440415\n","         Single           0.360967\n","         Divorced         0.198618\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: OverTime\n","Cluster  OverTime\n","0        No          0.692000\n","         Yes         0.308000\n","1        No          0.706052\n","         Yes         0.293948\n","2        No          0.721934\n","         Yes         0.278066\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: PerformanceRating\n","Cluster  PerformanceRating\n","0        Excellent            0.828000\n","         Outstanding          0.172000\n","1        Excellent            0.855908\n","         Outstanding          0.144092\n","2        Excellent            0.841105\n","         Outstanding          0.158895\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: RelationshipSatisfaction\n","Cluster  RelationshipSatisfaction\n","0        High                        0.348000\n","         Very High                   0.260000\n","         Medium                      0.216000\n","         Low                         0.176000\n","1        High                        0.357349\n","         Very High                   0.247839\n","         Low                         0.201729\n","         Medium                      0.193084\n","2        Very High                   0.369603\n","         High                        0.248705\n","         Medium                      0.205527\n","         Low                         0.176166\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: WorkLifeBalance\n","Cluster  WorkLifeBalance\n","0        Better             0.572000\n","         Good               0.252000\n","         Best               0.112000\n","         Bad                0.064000\n","1        Better             0.622478\n","         Good               0.224784\n","         Best               0.109510\n","         Bad                0.043228\n","2        Better             0.607945\n","         Good               0.222798\n","         Best               0.101900\n","         Bad                0.067358\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n","\n","Feature: Attrition\n","Cluster  Attrition\n","0        No           0.916000\n","         Yes          0.084000\n","1        No           0.847262\n","         Yes          0.152738\n","2        No           0.799655\n","         Yes          0.200345\n","Name: proportion, dtype: float64\n","--------------------------------------------------\n"]}]},{"cell_type":"markdown","source":["## Clusterwise Regression Employee Clusters Analysis\n","\n","## Cluster 0: \"Experienced Contributors\"\n","- **Size**: 579 employees (48.5%)\n","- **Key Attributes**:\n","  - **Age**: Average of 46.26 years, indicating a mature workforce.\n","  - **Daily Rate**: Moderate mean of $787.95, suggesting competitive compensation.\n","  - **Years in Current Role**: Highest average tenure of 6.52 years, reflecting loyalty and experience.\n","  - **Environment Satisfaction**: High satisfaction (36.4% report \"High\"), contributing to a positive workplace atmosphere.\n","  - **Job Satisfaction**: Highest percentage of \"Very High\" satisfaction (39.2%).\n","  - **Overtime**: 30.8% work overtime, indicating a willingness to go beyond regular hours.\n","  - **Job Role**: Diverse roles, with significant representation in managerial positions (30%).\n","  - **Marital Status**: 46.8% are married, indicating stability.\n","- **Description**: This cluster represents a well-established group of employees who are experienced and largely satisfied with their roles. Their longevity in the company suggests effective career development practices. They demonstrate a strong commitment to the organization and possess valuable institutional knowledge. Strategies focusing on recognizing their contributions and providing further professional development opportunities could enhance retention.\n","\n","## Cluster 1: \"Mid-Career Sales Employees\"\n","- **Size**: 347 employees (29.1%)\n","- **Key Attributes**:\n","  - **Age**: Younger average age of 37.22 years, representing the mid-career stage.\n","  - **Daily Rate**: Higher average daily rate of $870.40, indicating competitive pay for technical skills.\n","  - **Years in Current Role**: Moderate tenure of 4.71 years, suggesting stability but also potential for career advancement.\n","  - **Environment Satisfaction**: Very high satisfaction (38.0% report \"Very High\"), indicating a supportive work environment.\n","  - **Job Satisfaction**: A balanced mix, with 31.4% reporting \"High\" satisfaction.\n","  - **Overtime**: Higher overtime prevalence (29.3%), indicating they may be overworked.\n","  - **Job Role**: Predominantly in technical roles, such as Sales Executives and Research Scientists.\n","  - **Gender Distribution**: Balanced, with 62.2% female employees.\n","- **Description**: This cluster consists of mid-career professionals who are highly engaged in their roles. Their higher pay and satisfaction levels suggest that they feel valued by the organization. However, the prevalence of overtime indicates a potential need for better work-life balance initiatives. Retention efforts could focus on promoting career advancement opportunities and ensuring workload management to maintain high morale.\n","\n","## Cluster 2: \"Young Innovators\"\n","- **Size**: 250 employees (21.3%)\n","- **Key Attributes**:\n","  - **Age**: Youngest average age of 32.87 years, representing early-career professionals.\n","  - **Daily Rate**: Moderate average daily rate of $771.12, reflecting entry-level to mid-range salaries.\n","  - **Years in Current Role**: Shortest tenure of 2.96 years, indicating recent hires or transitions.\n","  - **Environment Satisfaction**: Lower satisfaction levels, with only 34.9% reporting \"High\" satisfaction.\n","  - **Job Satisfaction**: Similar to environment satisfaction, with 32.3% reporting \"High\" job satisfaction.\n","  - **Overtime**: Lowest overtime prevalence (27.8%), which may suggest a balanced workload.\n","  - **Job Role**: Predominantly in junior or mid-level roles, like Laboratory Technicians.\n","  - **Education**: Highest percentage of employees with bachelor's degrees (40.1%).\n","- **Description**: This cluster represents a younger workforce that may be more vulnerable to turnover due to their relatively low job satisfaction and shorter tenure. Their innovative potential can be harnessed through mentorship and development programs. To enhance retention, it's crucial to address their lower satisfaction levels, possibly through career advancement opportunities, improved workplace culture, and increased recognition for contributions."],"metadata":{"id":"RnUx1dDczFE4"},"id":"RnUx1dDczFE4"},{"cell_type":"markdown","source":["\n","### Our analysis reveals that tree-based models and logistic regression outperform cluster-wise regression in overall test accuracy. Tree models, in particular, demonstrate superior handling of imbalanced datasets, likely due to their ability to capture complex, non-linear relationships and adapt to varying class distributions. However, cluster-wise regression exhibits a distinct advantage in recall, making it more effective in identifying minority class instances within clusters. Given our business objectiveâ€”to ensure that underrepresented groups of attritioning employees are accurately predictedâ€”we prioritize recall over overall accuracy. Therefore, we conclude that cluster-wise regression is the best model for this analysis, as it minimizes bias and enhances the detection of employees at higher risk of attrition."],"metadata":{"id":"Rbgf_ou06edk"},"id":"Rbgf_ou06edk"}],"metadata":{"colab":{"provenance":[],"collapsed_sections":["aj9hXX0HcqJr","pq0kRr0K00Q_","1qMZB_LK_Aif","WGuUwSRfq1HH"]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.4"}},"nbformat":4,"nbformat_minor":5}